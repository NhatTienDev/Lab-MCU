
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f58  08002f58  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002f58  08002f58  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f58  08002f58  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000018  08002f78  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002f78  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f19  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b73  00000000  00000000  00029f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002c580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cf1  00000000  00000000  0002cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be60  00000000  00000000  00043c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008277b  00000000  00000000  0004fa79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d21f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a40  00000000  00000000  000d2248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f1c 	.word	0x08002f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002f1c 	.word	0x08002f1c

0800014c <autoRun>:
 */

#include "auto.h"

void autoRun()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(MODE == MODE1)
 8000150:	4b94      	ldr	r3, [pc, #592]	; (80003a4 <autoRun+0x258>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	f040 8122 	bne.w	800039e <autoRun+0x252>
	{
		switch(firstCoupleLedAutoState)
 800015a:	4b93      	ldr	r3, [pc, #588]	; (80003a8 <autoRun+0x25c>)
 800015c:	781b      	ldrb	r3, [r3, #0]
 800015e:	2b03      	cmp	r3, #3
 8000160:	d862      	bhi.n	8000228 <autoRun+0xdc>
 8000162:	a201      	add	r2, pc, #4	; (adr r2, 8000168 <autoRun+0x1c>)
 8000164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000168:	08000179 	.word	0x08000179
 800016c:	08000187 	.word	0x08000187
 8000170:	080001bd 	.word	0x080001bd
 8000174:	080001f3 	.word	0x080001f3
		{
			case LED_INIT:
				firstCoupleLedAutoState = RED;
 8000178:	4b8b      	ldr	r3, [pc, #556]	; (80003a8 <autoRun+0x25c>)
 800017a:	2201      	movs	r2, #1
 800017c:	701a      	strb	r2, [r3, #0]
				setTimer0(100);
 800017e:	2064      	movs	r0, #100	; 0x64
 8000180:	f001 f9aa 	bl	80014d8 <setTimer0>
				break;
 8000184:	e057      	b.n	8000236 <autoRun+0xea>
			case RED:
				displayFirstLedCouple(RED);
 8000186:	2001      	movs	r0, #1
 8000188:	f000 f93e 	bl	8000408 <displayFirstLedCouple>
				if(timer0_flag == 1)
 800018c:	4b87      	ldr	r3, [pc, #540]	; (80003ac <autoRun+0x260>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d14b      	bne.n	800022c <autoRun+0xe0>
				{
					countdownFirstCoupleLed--;
 8000194:	4b86      	ldr	r3, [pc, #536]	; (80003b0 <autoRun+0x264>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	3b01      	subs	r3, #1
 800019a:	4a85      	ldr	r2, [pc, #532]	; (80003b0 <autoRun+0x264>)
 800019c:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0)
 800019e:	4b84      	ldr	r3, [pc, #528]	; (80003b0 <autoRun+0x264>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d106      	bne.n	80001b4 <autoRun+0x68>
					{
						countdownFirstCoupleLed = greenDelay;
 80001a6:	4b83      	ldr	r3, [pc, #524]	; (80003b4 <autoRun+0x268>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a81      	ldr	r2, [pc, #516]	; (80003b0 <autoRun+0x264>)
 80001ac:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = GREEN;
 80001ae:	4b7e      	ldr	r3, [pc, #504]	; (80003a8 <autoRun+0x25c>)
 80001b0:	2202      	movs	r2, #2
 80001b2:	701a      	strb	r2, [r3, #0]
					}
					setTimer0(100);
 80001b4:	2064      	movs	r0, #100	; 0x64
 80001b6:	f001 f98f 	bl	80014d8 <setTimer0>
				}
				break;
 80001ba:	e037      	b.n	800022c <autoRun+0xe0>
			case GREEN:
				displayFirstLedCouple(GREEN);
 80001bc:	2002      	movs	r0, #2
 80001be:	f000 f923 	bl	8000408 <displayFirstLedCouple>
				if(timer0_flag == 1)
 80001c2:	4b7a      	ldr	r3, [pc, #488]	; (80003ac <autoRun+0x260>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2b01      	cmp	r3, #1
 80001c8:	d132      	bne.n	8000230 <autoRun+0xe4>
				{
					countdownFirstCoupleLed--;
 80001ca:	4b79      	ldr	r3, [pc, #484]	; (80003b0 <autoRun+0x264>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	4a77      	ldr	r2, [pc, #476]	; (80003b0 <autoRun+0x264>)
 80001d2:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0)
 80001d4:	4b76      	ldr	r3, [pc, #472]	; (80003b0 <autoRun+0x264>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d106      	bne.n	80001ea <autoRun+0x9e>
					{
						countdownFirstCoupleLed = yellowDelay;
 80001dc:	4b76      	ldr	r3, [pc, #472]	; (80003b8 <autoRun+0x26c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a73      	ldr	r2, [pc, #460]	; (80003b0 <autoRun+0x264>)
 80001e2:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = YELLOW;
 80001e4:	4b70      	ldr	r3, [pc, #448]	; (80003a8 <autoRun+0x25c>)
 80001e6:	2203      	movs	r2, #3
 80001e8:	701a      	strb	r2, [r3, #0]
					}
					setTimer0(100);
 80001ea:	2064      	movs	r0, #100	; 0x64
 80001ec:	f001 f974 	bl	80014d8 <setTimer0>
				}
				break;
 80001f0:	e01e      	b.n	8000230 <autoRun+0xe4>
			case YELLOW:
				displayFirstLedCouple(YELLOW);
 80001f2:	2003      	movs	r0, #3
 80001f4:	f000 f908 	bl	8000408 <displayFirstLedCouple>
				if(timer0_flag == 1){
 80001f8:	4b6c      	ldr	r3, [pc, #432]	; (80003ac <autoRun+0x260>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d119      	bne.n	8000234 <autoRun+0xe8>
					countdownFirstCoupleLed--;
 8000200:	4b6b      	ldr	r3, [pc, #428]	; (80003b0 <autoRun+0x264>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3b01      	subs	r3, #1
 8000206:	4a6a      	ldr	r2, [pc, #424]	; (80003b0 <autoRun+0x264>)
 8000208:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0)
 800020a:	4b69      	ldr	r3, [pc, #420]	; (80003b0 <autoRun+0x264>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d106      	bne.n	8000220 <autoRun+0xd4>
					{
						countdownFirstCoupleLed = redDelay;
 8000212:	4b6a      	ldr	r3, [pc, #424]	; (80003bc <autoRun+0x270>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a66      	ldr	r2, [pc, #408]	; (80003b0 <autoRun+0x264>)
 8000218:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = RED;
 800021a:	4b63      	ldr	r3, [pc, #396]	; (80003a8 <autoRun+0x25c>)
 800021c:	2201      	movs	r2, #1
 800021e:	701a      	strb	r2, [r3, #0]
					}
					setTimer0(100);
 8000220:	2064      	movs	r0, #100	; 0x64
 8000222:	f001 f959 	bl	80014d8 <setTimer0>
				}
				break;
 8000226:	e005      	b.n	8000234 <autoRun+0xe8>
			default:
				break;
 8000228:	bf00      	nop
 800022a:	e004      	b.n	8000236 <autoRun+0xea>
				break;
 800022c:	bf00      	nop
 800022e:	e002      	b.n	8000236 <autoRun+0xea>
				break;
 8000230:	bf00      	nop
 8000232:	e000      	b.n	8000236 <autoRun+0xea>
				break;
 8000234:	bf00      	nop
		}
		switch(secondCoupleLedAutoState)
 8000236:	4b62      	ldr	r3, [pc, #392]	; (80003c0 <autoRun+0x274>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b03      	cmp	r3, #3
 800023c:	d862      	bhi.n	8000304 <autoRun+0x1b8>
 800023e:	a201      	add	r2, pc, #4	; (adr r2, 8000244 <autoRun+0xf8>)
 8000240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000244:	08000255 	.word	0x08000255
 8000248:	08000263 	.word	0x08000263
 800024c:	08000299 	.word	0x08000299
 8000250:	080002cf 	.word	0x080002cf
		{
			case LED_INIT:
				secondCoupleLedAutoState = GREEN;
 8000254:	4b5a      	ldr	r3, [pc, #360]	; (80003c0 <autoRun+0x274>)
 8000256:	2202      	movs	r2, #2
 8000258:	701a      	strb	r2, [r3, #0]
				setTimer1(100);
 800025a:	2064      	movs	r0, #100	; 0x64
 800025c:	f001 f950 	bl	8001500 <setTimer1>
				break;
 8000260:	e057      	b.n	8000312 <autoRun+0x1c6>
			case RED:
				displaySecondLedCouple(RED);
 8000262:	2001      	movs	r0, #1
 8000264:	f000 f92c 	bl	80004c0 <displaySecondLedCouple>
				if(timer1_flag == 1)
 8000268:	4b56      	ldr	r3, [pc, #344]	; (80003c4 <autoRun+0x278>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d14b      	bne.n	8000308 <autoRun+0x1bc>
				{
					countdownSecondCoupleLed--;
 8000270:	4b55      	ldr	r3, [pc, #340]	; (80003c8 <autoRun+0x27c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	4a54      	ldr	r2, [pc, #336]	; (80003c8 <autoRun+0x27c>)
 8000278:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0)
 800027a:	4b53      	ldr	r3, [pc, #332]	; (80003c8 <autoRun+0x27c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d106      	bne.n	8000290 <autoRun+0x144>
					{
						countdownSecondCoupleLed = greenDelay;
 8000282:	4b4c      	ldr	r3, [pc, #304]	; (80003b4 <autoRun+0x268>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a50      	ldr	r2, [pc, #320]	; (80003c8 <autoRun+0x27c>)
 8000288:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = GREEN;
 800028a:	4b4d      	ldr	r3, [pc, #308]	; (80003c0 <autoRun+0x274>)
 800028c:	2202      	movs	r2, #2
 800028e:	701a      	strb	r2, [r3, #0]
					}
					setTimer1(100);
 8000290:	2064      	movs	r0, #100	; 0x64
 8000292:	f001 f935 	bl	8001500 <setTimer1>
				}
				break;
 8000296:	e037      	b.n	8000308 <autoRun+0x1bc>
			case GREEN:
				displaySecondLedCouple(GREEN);
 8000298:	2002      	movs	r0, #2
 800029a:	f000 f911 	bl	80004c0 <displaySecondLedCouple>
				if(timer1_flag == 1)
 800029e:	4b49      	ldr	r3, [pc, #292]	; (80003c4 <autoRun+0x278>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d132      	bne.n	800030c <autoRun+0x1c0>
				{
					countdownSecondCoupleLed--;
 80002a6:	4b48      	ldr	r3, [pc, #288]	; (80003c8 <autoRun+0x27c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	4a46      	ldr	r2, [pc, #280]	; (80003c8 <autoRun+0x27c>)
 80002ae:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0)
 80002b0:	4b45      	ldr	r3, [pc, #276]	; (80003c8 <autoRun+0x27c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <autoRun+0x17a>
					{
						countdownSecondCoupleLed = yellowDelay;
 80002b8:	4b3f      	ldr	r3, [pc, #252]	; (80003b8 <autoRun+0x26c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a42      	ldr	r2, [pc, #264]	; (80003c8 <autoRun+0x27c>)
 80002be:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = YELLOW;
 80002c0:	4b3f      	ldr	r3, [pc, #252]	; (80003c0 <autoRun+0x274>)
 80002c2:	2203      	movs	r2, #3
 80002c4:	701a      	strb	r2, [r3, #0]
					}
					setTimer1(100);
 80002c6:	2064      	movs	r0, #100	; 0x64
 80002c8:	f001 f91a 	bl	8001500 <setTimer1>
				}
				break;
 80002cc:	e01e      	b.n	800030c <autoRun+0x1c0>
			case YELLOW:
				displaySecondLedCouple(YELLOW);
 80002ce:	2003      	movs	r0, #3
 80002d0:	f000 f8f6 	bl	80004c0 <displaySecondLedCouple>
				if(timer1_flag == 1)
 80002d4:	4b3b      	ldr	r3, [pc, #236]	; (80003c4 <autoRun+0x278>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d119      	bne.n	8000310 <autoRun+0x1c4>
				{
					countdownSecondCoupleLed--;
 80002dc:	4b3a      	ldr	r3, [pc, #232]	; (80003c8 <autoRun+0x27c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	4a39      	ldr	r2, [pc, #228]	; (80003c8 <autoRun+0x27c>)
 80002e4:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0)
 80002e6:	4b38      	ldr	r3, [pc, #224]	; (80003c8 <autoRun+0x27c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d106      	bne.n	80002fc <autoRun+0x1b0>
					{
						countdownSecondCoupleLed = redDelay;
 80002ee:	4b33      	ldr	r3, [pc, #204]	; (80003bc <autoRun+0x270>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a35      	ldr	r2, [pc, #212]	; (80003c8 <autoRun+0x27c>)
 80002f4:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = RED;
 80002f6:	4b32      	ldr	r3, [pc, #200]	; (80003c0 <autoRun+0x274>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
					}
					setTimer1(100);
 80002fc:	2064      	movs	r0, #100	; 0x64
 80002fe:	f001 f8ff 	bl	8001500 <setTimer1>
				}
				break;
 8000302:	e005      	b.n	8000310 <autoRun+0x1c4>
			default:
				break;
 8000304:	bf00      	nop
 8000306:	e004      	b.n	8000312 <autoRun+0x1c6>
				break;
 8000308:	bf00      	nop
 800030a:	e002      	b.n	8000312 <autoRun+0x1c6>
				break;
 800030c:	bf00      	nop
 800030e:	e000      	b.n	8000312 <autoRun+0x1c6>
				break;
 8000310:	bf00      	nop
		}
		switch(seg7AutoState)
 8000312:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <autoRun+0x280>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d020      	beq.n	800035c <autoRun+0x210>
 800031a:	2b02      	cmp	r3, #2
 800031c:	dc31      	bgt.n	8000382 <autoRun+0x236>
 800031e:	2b00      	cmp	r3, #0
 8000320:	d002      	beq.n	8000328 <autoRun+0x1dc>
 8000322:	2b01      	cmp	r3, #1
 8000324:	d007      	beq.n	8000336 <autoRun+0x1ea>
					seg7AutoState = FIRST;
					setTimer2(50);
				}
				break;
			default:
				break;
 8000326:	e02c      	b.n	8000382 <autoRun+0x236>
				seg7AutoState = FIRST;
 8000328:	4b28      	ldr	r3, [pc, #160]	; (80003cc <autoRun+0x280>)
 800032a:	2201      	movs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
				setTimer2(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f001 f8fa 	bl	8001528 <setTimer2>
				break;
 8000334:	e02a      	b.n	800038c <autoRun+0x240>
				if(timer2_flag == 1)
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <autoRun+0x284>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d123      	bne.n	8000386 <autoRun+0x23a>
					showTimeDelay_First(countdownFirstCoupleLed, countdownSecondCoupleLed);
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <autoRun+0x264>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a21      	ldr	r2, [pc, #132]	; (80003c8 <autoRun+0x27c>)
 8000344:	6812      	ldr	r2, [r2, #0]
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fcf3 	bl	8000d34 <showTimeDelay_First>
					seg7AutoState = SECOND;
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <autoRun+0x280>)
 8000350:	2202      	movs	r2, #2
 8000352:	701a      	strb	r2, [r3, #0]
					setTimer2(50);
 8000354:	2032      	movs	r0, #50	; 0x32
 8000356:	f001 f8e7 	bl	8001528 <setTimer2>
				break;
 800035a:	e014      	b.n	8000386 <autoRun+0x23a>
				if(timer2_flag == 1)
 800035c:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <autoRun+0x284>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d112      	bne.n	800038a <autoRun+0x23e>
					showTimeDelay_Second(countdownFirstCoupleLed, countdownSecondCoupleLed);
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <autoRun+0x264>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <autoRun+0x27c>)
 800036a:	6812      	ldr	r2, [r2, #0]
 800036c:	4611      	mov	r1, r2
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fd04 	bl	8000d7c <showTimeDelay_Second>
					seg7AutoState = FIRST;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <autoRun+0x280>)
 8000376:	2201      	movs	r2, #1
 8000378:	701a      	strb	r2, [r3, #0]
					setTimer2(50);
 800037a:	2032      	movs	r0, #50	; 0x32
 800037c:	f001 f8d4 	bl	8001528 <setTimer2>
				break;
 8000380:	e003      	b.n	800038a <autoRun+0x23e>
				break;
 8000382:	bf00      	nop
 8000384:	e002      	b.n	800038c <autoRun+0x240>
				break;
 8000386:	bf00      	nop
 8000388:	e000      	b.n	800038c <autoRun+0x240>
				break;
 800038a:	bf00      	nop
		}

		if(isButtonPressed(0) == 1 )
 800038c:	2000      	movs	r0, #0
 800038e:	f000 f821 	bl	80003d4 <isButtonPressed>
 8000392:	4603      	mov	r3, r0
 8000394:	2b01      	cmp	r3, #1
 8000396:	d102      	bne.n	800039e <autoRun+0x252>
		{
			MODE = MODE2;
 8000398:	4b02      	ldr	r3, [pc, #8]	; (80003a4 <autoRun+0x258>)
 800039a:	2202      	movs	r2, #2
 800039c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	2000008b 	.word	0x2000008b
 80003a8:	20000091 	.word	0x20000091
 80003ac:	20000040 	.word	0x20000040
 80003b0:	2000009c 	.word	0x2000009c
 80003b4:	20000004 	.word	0x20000004
 80003b8:	20000008 	.word	0x20000008
 80003bc:	20000000 	.word	0x20000000
 80003c0:	2000008f 	.word	0x2000008f
 80003c4:	20000044 	.word	0x20000044
 80003c8:	20000094 	.word	0x20000094
 80003cc:	20000099 	.word	0x20000099
 80003d0:	20000048 	.word	0x20000048

080003d4 <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};

int isButtonPressed(int i)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	if(button_flag[i] == 1)
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <isButtonPressed+0x30>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d106      	bne.n	80003f6 <isButtonPressed+0x22>
	{
		button_flag[i] = 0;
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <isButtonPressed+0x30>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2100      	movs	r1, #0
 80003ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	e000      	b.n	80003f8 <isButtonPressed+0x24>
	}
	return 0;
 80003f6:	2300      	movs	r3, #0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000034 	.word	0x20000034

08000408 <displayFirstLedCouple>:
 */

#include "display_led.h"

void displayFirstLedCouple(enum LedState state_1)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
	switch(state_1)
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d84b      	bhi.n	80004b0 <displayFirstLedCouple+0xa8>
 8000418:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <displayFirstLedCouple+0x18>)
 800041a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041e:	bf00      	nop
 8000420:	08000431 	.word	0x08000431
 8000424:	08000451 	.word	0x08000451
 8000428:	08000491 	.word	0x08000491
 800042c:	08000471 	.word	0x08000471
	{
		case LED_INIT:
			HAL_GPIO_WritePin(FIRST_COUPLE_GREEN_GPIO_Port, FIRST_COUPLE_GREEN_Pin, 1);
 8000430:	2201      	movs	r2, #1
 8000432:	2110      	movs	r1, #16
 8000434:	4821      	ldr	r0, [pc, #132]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000436:	f001 fd5b 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FIRST_COUPLE_YELLOW_GPIO_Port, FIRST_COUPLE_YELLOW_Pin, 1);
 800043a:	2201      	movs	r2, #1
 800043c:	2108      	movs	r1, #8
 800043e:	481f      	ldr	r0, [pc, #124]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000440:	f001 fd56 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FIRST_COUPLE_RED_GPIO_Port, FIRST_COUPLE_RED_Pin, 1);
 8000444:	2201      	movs	r2, #1
 8000446:	2104      	movs	r1, #4
 8000448:	481c      	ldr	r0, [pc, #112]	; (80004bc <displayFirstLedCouple+0xb4>)
 800044a:	f001 fd51 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 800044e:	e030      	b.n	80004b2 <displayFirstLedCouple+0xaa>
		case RED:
			HAL_GPIO_WritePin(FIRST_COUPLE_GREEN_GPIO_Port, FIRST_COUPLE_GREEN_Pin, 1);
 8000450:	2201      	movs	r2, #1
 8000452:	2110      	movs	r1, #16
 8000454:	4819      	ldr	r0, [pc, #100]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000456:	f001 fd4b 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FIRST_COUPLE_YELLOW_GPIO_Port, FIRST_COUPLE_YELLOW_Pin, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	2108      	movs	r1, #8
 800045e:	4817      	ldr	r0, [pc, #92]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000460:	f001 fd46 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FIRST_COUPLE_RED_GPIO_Port, FIRST_COUPLE_RED_Pin, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2104      	movs	r1, #4
 8000468:	4814      	ldr	r0, [pc, #80]	; (80004bc <displayFirstLedCouple+0xb4>)
 800046a:	f001 fd41 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 800046e:	e020      	b.n	80004b2 <displayFirstLedCouple+0xaa>
		case YELLOW:
			HAL_GPIO_WritePin(FIRST_COUPLE_GREEN_GPIO_Port, FIRST_COUPLE_GREEN_Pin, 1);
 8000470:	2201      	movs	r2, #1
 8000472:	2110      	movs	r1, #16
 8000474:	4811      	ldr	r0, [pc, #68]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000476:	f001 fd3b 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FIRST_COUPLE_YELLOW_GPIO_Port, FIRST_COUPLE_YELLOW_Pin, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2108      	movs	r1, #8
 800047e:	480f      	ldr	r0, [pc, #60]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000480:	f001 fd36 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FIRST_COUPLE_RED_GPIO_Port, FIRST_COUPLE_RED_Pin, 1);
 8000484:	2201      	movs	r2, #1
 8000486:	2104      	movs	r1, #4
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <displayFirstLedCouple+0xb4>)
 800048a:	f001 fd31 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 800048e:	e010      	b.n	80004b2 <displayFirstLedCouple+0xaa>
		case GREEN:
			HAL_GPIO_WritePin(FIRST_COUPLE_GREEN_GPIO_Port, FIRST_COUPLE_GREEN_Pin, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	2110      	movs	r1, #16
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000496:	f001 fd2b 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FIRST_COUPLE_YELLOW_GPIO_Port, FIRST_COUPLE_YELLOW_Pin, 1);
 800049a:	2201      	movs	r2, #1
 800049c:	2108      	movs	r1, #8
 800049e:	4807      	ldr	r0, [pc, #28]	; (80004bc <displayFirstLedCouple+0xb4>)
 80004a0:	f001 fd26 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FIRST_COUPLE_RED_GPIO_Port, FIRST_COUPLE_RED_Pin, 1);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2104      	movs	r1, #4
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <displayFirstLedCouple+0xb4>)
 80004aa:	f001 fd21 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 80004ae:	e000      	b.n	80004b2 <displayFirstLedCouple+0xaa>
		default:
			break;
 80004b0:	bf00      	nop
	}
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40010800 	.word	0x40010800

080004c0 <displaySecondLedCouple>:

void displaySecondLedCouple(enum LedState state_2)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	switch(state_2)
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d84b      	bhi.n	8000568 <displaySecondLedCouple+0xa8>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <displaySecondLedCouple+0x18>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004e9 	.word	0x080004e9
 80004dc:	08000509 	.word	0x08000509
 80004e0:	08000549 	.word	0x08000549
 80004e4:	08000529 	.word	0x08000529
	{
		case LED_INIT:
			HAL_GPIO_WritePin(SECOND_COUPLE_GREEN_GPIO_Port, SECOND_COUPLE_GREEN_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	4821      	ldr	r0, [pc, #132]	; (8000574 <displaySecondLedCouple+0xb4>)
 80004ee:	f001 fcff 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SECOND_COUPLE_YELLOW_GPIO_Port, SECOND_COUPLE_YELLOW_Pin, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2140      	movs	r1, #64	; 0x40
 80004f6:	481f      	ldr	r0, [pc, #124]	; (8000574 <displaySecondLedCouple+0xb4>)
 80004f8:	f001 fcfa 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SECOND_COUPLE_RED_GPIO_Port, SECOND_COUPLE_RED_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2120      	movs	r1, #32
 8000500:	481c      	ldr	r0, [pc, #112]	; (8000574 <displaySecondLedCouple+0xb4>)
 8000502:	f001 fcf5 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000506:	e030      	b.n	800056a <displaySecondLedCouple+0xaa>
		case RED:
			HAL_GPIO_WritePin(SECOND_COUPLE_GREEN_GPIO_Port, SECOND_COUPLE_GREEN_Pin, 1);
 8000508:	2201      	movs	r2, #1
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	4819      	ldr	r0, [pc, #100]	; (8000574 <displaySecondLedCouple+0xb4>)
 800050e:	f001 fcef 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SECOND_COUPLE_YELLOW_GPIO_Port, SECOND_COUPLE_YELLOW_Pin, 1);
 8000512:	2201      	movs	r2, #1
 8000514:	2140      	movs	r1, #64	; 0x40
 8000516:	4817      	ldr	r0, [pc, #92]	; (8000574 <displaySecondLedCouple+0xb4>)
 8000518:	f001 fcea 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SECOND_COUPLE_RED_GPIO_Port, SECOND_COUPLE_RED_Pin, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2120      	movs	r1, #32
 8000520:	4814      	ldr	r0, [pc, #80]	; (8000574 <displaySecondLedCouple+0xb4>)
 8000522:	f001 fce5 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000526:	e020      	b.n	800056a <displaySecondLedCouple+0xaa>
		case YELLOW:
			HAL_GPIO_WritePin(SECOND_COUPLE_GREEN_GPIO_Port, SECOND_COUPLE_GREEN_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	4811      	ldr	r0, [pc, #68]	; (8000574 <displaySecondLedCouple+0xb4>)
 800052e:	f001 fcdf 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SECOND_COUPLE_YELLOW_GPIO_Port, SECOND_COUPLE_YELLOW_Pin, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2140      	movs	r1, #64	; 0x40
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <displaySecondLedCouple+0xb4>)
 8000538:	f001 fcda 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SECOND_COUPLE_RED_GPIO_Port, SECOND_COUPLE_RED_Pin, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	2120      	movs	r1, #32
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <displaySecondLedCouple+0xb4>)
 8000542:	f001 fcd5 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000546:	e010      	b.n	800056a <displaySecondLedCouple+0xaa>
		case GREEN:
			HAL_GPIO_WritePin(SECOND_COUPLE_GREEN_GPIO_Port, SECOND_COUPLE_GREEN_Pin, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	4809      	ldr	r0, [pc, #36]	; (8000574 <displaySecondLedCouple+0xb4>)
 800054e:	f001 fccf 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SECOND_COUPLE_YELLOW_GPIO_Port, SECOND_COUPLE_YELLOW_Pin, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <displaySecondLedCouple+0xb4>)
 8000558:	f001 fcca 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SECOND_COUPLE_RED_GPIO_Port, SECOND_COUPLE_RED_Pin, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	2120      	movs	r1, #32
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <displaySecondLedCouple+0xb4>)
 8000562:	f001 fcc5 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000566:	e000      	b.n	800056a <displaySecondLedCouple+0xaa>
		default:
			break;
 8000568:	bf00      	nop
   }
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010800 	.word	0x40010800

08000578 <toggleLeds>:

void toggleLeds(enum LedState state)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	switch(state)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b03      	cmp	r3, #3
 8000586:	d00e      	beq.n	80005a6 <toggleLeds+0x2e>
 8000588:	2b03      	cmp	r3, #3
 800058a:	dc1e      	bgt.n	80005ca <toggleLeds+0x52>
 800058c:	2b01      	cmp	r3, #1
 800058e:	d013      	beq.n	80005b8 <toggleLeds+0x40>
 8000590:	2b02      	cmp	r3, #2
 8000592:	d11a      	bne.n	80005ca <toggleLeds+0x52>
	{
		case GREEN:
			HAL_GPIO_TogglePin(FIRST_COUPLE_GREEN_GPIO_Port, FIRST_COUPLE_GREEN_Pin);
 8000594:	2110      	movs	r1, #16
 8000596:	480f      	ldr	r0, [pc, #60]	; (80005d4 <toggleLeds+0x5c>)
 8000598:	f001 fcc2 	bl	8001f20 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(SECOND_COUPLE_GREEN_GPIO_Port, SECOND_COUPLE_GREEN_Pin);
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	480d      	ldr	r0, [pc, #52]	; (80005d4 <toggleLeds+0x5c>)
 80005a0:	f001 fcbe 	bl	8001f20 <HAL_GPIO_TogglePin>
			break;
 80005a4:	e012      	b.n	80005cc <toggleLeds+0x54>
		case YELLOW:
			HAL_GPIO_TogglePin(FIRST_COUPLE_YELLOW_GPIO_Port, FIRST_COUPLE_YELLOW_Pin);
 80005a6:	2108      	movs	r1, #8
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <toggleLeds+0x5c>)
 80005aa:	f001 fcb9 	bl	8001f20 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(SECOND_COUPLE_YELLOW_GPIO_Port, SECOND_COUPLE_YELLOW_Pin);
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4808      	ldr	r0, [pc, #32]	; (80005d4 <toggleLeds+0x5c>)
 80005b2:	f001 fcb5 	bl	8001f20 <HAL_GPIO_TogglePin>
			break;
 80005b6:	e009      	b.n	80005cc <toggleLeds+0x54>
		case RED:
			HAL_GPIO_TogglePin(FIRST_COUPLE_RED_GPIO_Port, FIRST_COUPLE_RED_Pin);
 80005b8:	2104      	movs	r1, #4
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <toggleLeds+0x5c>)
 80005bc:	f001 fcb0 	bl	8001f20 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(SECOND_COUPLE_RED_GPIO_Port, SECOND_COUPLE_RED_Pin);
 80005c0:	2120      	movs	r1, #32
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <toggleLeds+0x5c>)
 80005c4:	f001 fcac 	bl	8001f20 <HAL_GPIO_TogglePin>
			break;
 80005c8:	e000      	b.n	80005cc <toggleLeds+0x54>
		default:
			break;
 80005ca:	bf00      	nop
	}
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40010800 	.word	0x40010800

080005d8 <displaySEG7_1>:

void displaySEG7_1(int num)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b09      	cmp	r3, #9
 80005e4:	f200 8180 	bhi.w	80008e8 <displaySEG7_1+0x310>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <displaySEG7_1+0x18>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000619 	.word	0x08000619
 80005f4:	08000661 	.word	0x08000661
 80005f8:	080006a9 	.word	0x080006a9
 80005fc:	080006f1 	.word	0x080006f1
 8000600:	08000739 	.word	0x08000739
 8000604:	08000781 	.word	0x08000781
 8000608:	080007c9 	.word	0x080007c9
 800060c:	08000811 	.word	0x08000811
 8000610:	08000859 	.word	0x08000859
 8000614:	080008a1 	.word	0x080008a1
	switch(num)
	{
		case 0:
			HAL_GPIO_WritePin( A1_GPIO_Port , A1_Pin , 0 );
 8000618:	2200      	movs	r2, #0
 800061a:	2101      	movs	r1, #1
 800061c:	48b5      	ldr	r0, [pc, #724]	; (80008f4 <displaySEG7_1+0x31c>)
 800061e:	f001 fc67 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( B1_GPIO_Port , B1_Pin , 0 );
 8000622:	2200      	movs	r2, #0
 8000624:	2102      	movs	r1, #2
 8000626:	48b3      	ldr	r0, [pc, #716]	; (80008f4 <displaySEG7_1+0x31c>)
 8000628:	f001 fc62 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( C1_GPIO_Port , C1_Pin , 0 );
 800062c:	2200      	movs	r2, #0
 800062e:	2104      	movs	r1, #4
 8000630:	48b0      	ldr	r0, [pc, #704]	; (80008f4 <displaySEG7_1+0x31c>)
 8000632:	f001 fc5d 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( D1_GPIO_Port , D1_Pin , 0 );
 8000636:	2200      	movs	r2, #0
 8000638:	2108      	movs	r1, #8
 800063a:	48ae      	ldr	r0, [pc, #696]	; (80008f4 <displaySEG7_1+0x31c>)
 800063c:	f001 fc58 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( E1_GPIO_Port , E1_Pin , 0 );
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	48ab      	ldr	r0, [pc, #684]	; (80008f4 <displaySEG7_1+0x31c>)
 8000646:	f001 fc53 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( F1_GPIO_Port , F1_Pin , 0 );
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	48a9      	ldr	r0, [pc, #676]	; (80008f4 <displaySEG7_1+0x31c>)
 8000650:	f001 fc4e 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( G1_GPIO_Port , G1_Pin , 1 );
 8000654:	2201      	movs	r2, #1
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	48a6      	ldr	r0, [pc, #664]	; (80008f4 <displaySEG7_1+0x31c>)
 800065a:	f001 fc49 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 800065e:	e144      	b.n	80008ea <displaySEG7_1+0x312>

		case 1:
			HAL_GPIO_WritePin( A1_GPIO_Port , A1_Pin , 1 );
 8000660:	2201      	movs	r2, #1
 8000662:	2101      	movs	r1, #1
 8000664:	48a3      	ldr	r0, [pc, #652]	; (80008f4 <displaySEG7_1+0x31c>)
 8000666:	f001 fc43 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( B1_GPIO_Port , B1_Pin , 0 );
 800066a:	2200      	movs	r2, #0
 800066c:	2102      	movs	r1, #2
 800066e:	48a1      	ldr	r0, [pc, #644]	; (80008f4 <displaySEG7_1+0x31c>)
 8000670:	f001 fc3e 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( C1_GPIO_Port , C1_Pin , 0 );
 8000674:	2200      	movs	r2, #0
 8000676:	2104      	movs	r1, #4
 8000678:	489e      	ldr	r0, [pc, #632]	; (80008f4 <displaySEG7_1+0x31c>)
 800067a:	f001 fc39 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( D1_GPIO_Port , D1_Pin , 1 );
 800067e:	2201      	movs	r2, #1
 8000680:	2108      	movs	r1, #8
 8000682:	489c      	ldr	r0, [pc, #624]	; (80008f4 <displaySEG7_1+0x31c>)
 8000684:	f001 fc34 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( E1_GPIO_Port , E1_Pin , 1 );
 8000688:	2201      	movs	r2, #1
 800068a:	2110      	movs	r1, #16
 800068c:	4899      	ldr	r0, [pc, #612]	; (80008f4 <displaySEG7_1+0x31c>)
 800068e:	f001 fc2f 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( F1_GPIO_Port , F1_Pin , 1 );
 8000692:	2201      	movs	r2, #1
 8000694:	2120      	movs	r1, #32
 8000696:	4897      	ldr	r0, [pc, #604]	; (80008f4 <displaySEG7_1+0x31c>)
 8000698:	f001 fc2a 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( G1_GPIO_Port , G1_Pin , 1 );
 800069c:	2201      	movs	r2, #1
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	4894      	ldr	r0, [pc, #592]	; (80008f4 <displaySEG7_1+0x31c>)
 80006a2:	f001 fc25 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 80006a6:	e120      	b.n	80008ea <displaySEG7_1+0x312>

		case 2:
			HAL_GPIO_WritePin( A1_GPIO_Port , A1_Pin , 0 );
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	4891      	ldr	r0, [pc, #580]	; (80008f4 <displaySEG7_1+0x31c>)
 80006ae:	f001 fc1f 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( B1_GPIO_Port , B1_Pin , 0 );
 80006b2:	2200      	movs	r2, #0
 80006b4:	2102      	movs	r1, #2
 80006b6:	488f      	ldr	r0, [pc, #572]	; (80008f4 <displaySEG7_1+0x31c>)
 80006b8:	f001 fc1a 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( C1_GPIO_Port , C1_Pin , 1 );
 80006bc:	2201      	movs	r2, #1
 80006be:	2104      	movs	r1, #4
 80006c0:	488c      	ldr	r0, [pc, #560]	; (80008f4 <displaySEG7_1+0x31c>)
 80006c2:	f001 fc15 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( D1_GPIO_Port , D1_Pin , 0 );
 80006c6:	2200      	movs	r2, #0
 80006c8:	2108      	movs	r1, #8
 80006ca:	488a      	ldr	r0, [pc, #552]	; (80008f4 <displaySEG7_1+0x31c>)
 80006cc:	f001 fc10 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( E1_GPIO_Port , E1_Pin , 0 );
 80006d0:	2200      	movs	r2, #0
 80006d2:	2110      	movs	r1, #16
 80006d4:	4887      	ldr	r0, [pc, #540]	; (80008f4 <displaySEG7_1+0x31c>)
 80006d6:	f001 fc0b 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( F1_GPIO_Port , F1_Pin , 1 );
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4885      	ldr	r0, [pc, #532]	; (80008f4 <displaySEG7_1+0x31c>)
 80006e0:	f001 fc06 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( G1_GPIO_Port , G1_Pin , 0 );
 80006e4:	2200      	movs	r2, #0
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	4882      	ldr	r0, [pc, #520]	; (80008f4 <displaySEG7_1+0x31c>)
 80006ea:	f001 fc01 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 80006ee:	e0fc      	b.n	80008ea <displaySEG7_1+0x312>

		case 3:
			HAL_GPIO_WritePin( A1_GPIO_Port , A1_Pin , 0 );
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	487f      	ldr	r0, [pc, #508]	; (80008f4 <displaySEG7_1+0x31c>)
 80006f6:	f001 fbfb 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( B1_GPIO_Port , B1_Pin , 0 );
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	487d      	ldr	r0, [pc, #500]	; (80008f4 <displaySEG7_1+0x31c>)
 8000700:	f001 fbf6 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( C1_GPIO_Port , C1_Pin , 0 );
 8000704:	2200      	movs	r2, #0
 8000706:	2104      	movs	r1, #4
 8000708:	487a      	ldr	r0, [pc, #488]	; (80008f4 <displaySEG7_1+0x31c>)
 800070a:	f001 fbf1 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( D1_GPIO_Port , D1_Pin , 0 );
 800070e:	2200      	movs	r2, #0
 8000710:	2108      	movs	r1, #8
 8000712:	4878      	ldr	r0, [pc, #480]	; (80008f4 <displaySEG7_1+0x31c>)
 8000714:	f001 fbec 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( E1_GPIO_Port , E1_Pin , 1 );
 8000718:	2201      	movs	r2, #1
 800071a:	2110      	movs	r1, #16
 800071c:	4875      	ldr	r0, [pc, #468]	; (80008f4 <displaySEG7_1+0x31c>)
 800071e:	f001 fbe7 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( F1_GPIO_Port , F1_Pin , 1 );
 8000722:	2201      	movs	r2, #1
 8000724:	2120      	movs	r1, #32
 8000726:	4873      	ldr	r0, [pc, #460]	; (80008f4 <displaySEG7_1+0x31c>)
 8000728:	f001 fbe2 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( G1_GPIO_Port , G1_Pin , 0 );
 800072c:	2200      	movs	r2, #0
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	4870      	ldr	r0, [pc, #448]	; (80008f4 <displaySEG7_1+0x31c>)
 8000732:	f001 fbdd 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000736:	e0d8      	b.n	80008ea <displaySEG7_1+0x312>

		case 4:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 );
 8000738:	2201      	movs	r2, #1
 800073a:	2101      	movs	r1, #1
 800073c:	486d      	ldr	r0, [pc, #436]	; (80008f4 <displaySEG7_1+0x31c>)
 800073e:	f001 fbd7 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 );
 8000742:	2200      	movs	r2, #0
 8000744:	2102      	movs	r1, #2
 8000746:	486b      	ldr	r0, [pc, #428]	; (80008f4 <displaySEG7_1+0x31c>)
 8000748:	f001 fbd2 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 );
 800074c:	2200      	movs	r2, #0
 800074e:	2104      	movs	r1, #4
 8000750:	4868      	ldr	r0, [pc, #416]	; (80008f4 <displaySEG7_1+0x31c>)
 8000752:	f001 fbcd 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 );
 8000756:	2201      	movs	r2, #1
 8000758:	2108      	movs	r1, #8
 800075a:	4866      	ldr	r0, [pc, #408]	; (80008f4 <displaySEG7_1+0x31c>)
 800075c:	f001 fbc8 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 );
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	4863      	ldr	r0, [pc, #396]	; (80008f4 <displaySEG7_1+0x31c>)
 8000766:	f001 fbc3 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 );
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	4861      	ldr	r0, [pc, #388]	; (80008f4 <displaySEG7_1+0x31c>)
 8000770:	f001 fbbe 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 );
 8000774:	2200      	movs	r2, #0
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	485e      	ldr	r0, [pc, #376]	; (80008f4 <displaySEG7_1+0x31c>)
 800077a:	f001 fbb9 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 800077e:	e0b4      	b.n	80008ea <displaySEG7_1+0x312>
		case 5:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 );
 8000780:	2200      	movs	r2, #0
 8000782:	2101      	movs	r1, #1
 8000784:	485b      	ldr	r0, [pc, #364]	; (80008f4 <displaySEG7_1+0x31c>)
 8000786:	f001 fbb3 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 );
 800078a:	2201      	movs	r2, #1
 800078c:	2102      	movs	r1, #2
 800078e:	4859      	ldr	r0, [pc, #356]	; (80008f4 <displaySEG7_1+0x31c>)
 8000790:	f001 fbae 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 );
 8000794:	2200      	movs	r2, #0
 8000796:	2104      	movs	r1, #4
 8000798:	4856      	ldr	r0, [pc, #344]	; (80008f4 <displaySEG7_1+0x31c>)
 800079a:	f001 fba9 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 );
 800079e:	2200      	movs	r2, #0
 80007a0:	2108      	movs	r1, #8
 80007a2:	4854      	ldr	r0, [pc, #336]	; (80008f4 <displaySEG7_1+0x31c>)
 80007a4:	f001 fba4 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 );
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	4851      	ldr	r0, [pc, #324]	; (80008f4 <displaySEG7_1+0x31c>)
 80007ae:	f001 fb9f 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 );
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	484f      	ldr	r0, [pc, #316]	; (80008f4 <displaySEG7_1+0x31c>)
 80007b8:	f001 fb9a 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 );
 80007bc:	2200      	movs	r2, #0
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	484c      	ldr	r0, [pc, #304]	; (80008f4 <displaySEG7_1+0x31c>)
 80007c2:	f001 fb95 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 80007c6:	e090      	b.n	80008ea <displaySEG7_1+0x312>
		case 6:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 );
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	4849      	ldr	r0, [pc, #292]	; (80008f4 <displaySEG7_1+0x31c>)
 80007ce:	f001 fb8f 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 );
 80007d2:	2201      	movs	r2, #1
 80007d4:	2102      	movs	r1, #2
 80007d6:	4847      	ldr	r0, [pc, #284]	; (80008f4 <displaySEG7_1+0x31c>)
 80007d8:	f001 fb8a 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 );
 80007dc:	2200      	movs	r2, #0
 80007de:	2104      	movs	r1, #4
 80007e0:	4844      	ldr	r0, [pc, #272]	; (80008f4 <displaySEG7_1+0x31c>)
 80007e2:	f001 fb85 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 );
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	4842      	ldr	r0, [pc, #264]	; (80008f4 <displaySEG7_1+0x31c>)
 80007ec:	f001 fb80 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 );
 80007f0:	2200      	movs	r2, #0
 80007f2:	2110      	movs	r1, #16
 80007f4:	483f      	ldr	r0, [pc, #252]	; (80008f4 <displaySEG7_1+0x31c>)
 80007f6:	f001 fb7b 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 );
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	483d      	ldr	r0, [pc, #244]	; (80008f4 <displaySEG7_1+0x31c>)
 8000800:	f001 fb76 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 );
 8000804:	2200      	movs	r2, #0
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	483a      	ldr	r0, [pc, #232]	; (80008f4 <displaySEG7_1+0x31c>)
 800080a:	f001 fb71 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 800080e:	e06c      	b.n	80008ea <displaySEG7_1+0x312>
		case 7:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 );
 8000810:	2200      	movs	r2, #0
 8000812:	2101      	movs	r1, #1
 8000814:	4837      	ldr	r0, [pc, #220]	; (80008f4 <displaySEG7_1+0x31c>)
 8000816:	f001 fb6b 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 );
 800081a:	2200      	movs	r2, #0
 800081c:	2102      	movs	r1, #2
 800081e:	4835      	ldr	r0, [pc, #212]	; (80008f4 <displaySEG7_1+0x31c>)
 8000820:	f001 fb66 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 );
 8000824:	2200      	movs	r2, #0
 8000826:	2104      	movs	r1, #4
 8000828:	4832      	ldr	r0, [pc, #200]	; (80008f4 <displaySEG7_1+0x31c>)
 800082a:	f001 fb61 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 );
 800082e:	2201      	movs	r2, #1
 8000830:	2108      	movs	r1, #8
 8000832:	4830      	ldr	r0, [pc, #192]	; (80008f4 <displaySEG7_1+0x31c>)
 8000834:	f001 fb5c 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 );
 8000838:	2201      	movs	r2, #1
 800083a:	2110      	movs	r1, #16
 800083c:	482d      	ldr	r0, [pc, #180]	; (80008f4 <displaySEG7_1+0x31c>)
 800083e:	f001 fb57 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 );
 8000842:	2201      	movs	r2, #1
 8000844:	2120      	movs	r1, #32
 8000846:	482b      	ldr	r0, [pc, #172]	; (80008f4 <displaySEG7_1+0x31c>)
 8000848:	f001 fb52 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 );
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	4828      	ldr	r0, [pc, #160]	; (80008f4 <displaySEG7_1+0x31c>)
 8000852:	f001 fb4d 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000856:	e048      	b.n	80008ea <displaySEG7_1+0x312>
		case 8:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 );
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	4825      	ldr	r0, [pc, #148]	; (80008f4 <displaySEG7_1+0x31c>)
 800085e:	f001 fb47 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 );
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	4823      	ldr	r0, [pc, #140]	; (80008f4 <displaySEG7_1+0x31c>)
 8000868:	f001 fb42 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 );
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	4820      	ldr	r0, [pc, #128]	; (80008f4 <displaySEG7_1+0x31c>)
 8000872:	f001 fb3d 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 );
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	481e      	ldr	r0, [pc, #120]	; (80008f4 <displaySEG7_1+0x31c>)
 800087c:	f001 fb38 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 );
 8000880:	2200      	movs	r2, #0
 8000882:	2110      	movs	r1, #16
 8000884:	481b      	ldr	r0, [pc, #108]	; (80008f4 <displaySEG7_1+0x31c>)
 8000886:	f001 fb33 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 );
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	4819      	ldr	r0, [pc, #100]	; (80008f4 <displaySEG7_1+0x31c>)
 8000890:	f001 fb2e 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 );
 8000894:	2200      	movs	r2, #0
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	4816      	ldr	r0, [pc, #88]	; (80008f4 <displaySEG7_1+0x31c>)
 800089a:	f001 fb29 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 800089e:	e024      	b.n	80008ea <displaySEG7_1+0x312>
		case 9:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 );
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	4813      	ldr	r0, [pc, #76]	; (80008f4 <displaySEG7_1+0x31c>)
 80008a6:	f001 fb23 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 );
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <displaySEG7_1+0x31c>)
 80008b0:	f001 fb1e 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 );
 80008b4:	2200      	movs	r2, #0
 80008b6:	2104      	movs	r1, #4
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <displaySEG7_1+0x31c>)
 80008ba:	f001 fb19 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 );
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <displaySEG7_1+0x31c>)
 80008c4:	f001 fb14 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 );
 80008c8:	2201      	movs	r2, #1
 80008ca:	2110      	movs	r1, #16
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <displaySEG7_1+0x31c>)
 80008ce:	f001 fb0f 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 );
 80008d2:	2200      	movs	r2, #0
 80008d4:	2120      	movs	r1, #32
 80008d6:	4807      	ldr	r0, [pc, #28]	; (80008f4 <displaySEG7_1+0x31c>)
 80008d8:	f001 fb0a 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 );
 80008dc:	2200      	movs	r2, #0
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <displaySEG7_1+0x31c>)
 80008e2:	f001 fb05 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 80008e6:	e000      	b.n	80008ea <displaySEG7_1+0x312>

		default:
			break;
 80008e8:	bf00      	nop
	}
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010c00 	.word	0x40010c00

080008f8 <displaySEG7_2>:

void displaySEG7_2(int num)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b09      	cmp	r3, #9
 8000904:	f200 81c8 	bhi.w	8000c98 <displaySEG7_2+0x3a0>
 8000908:	a201      	add	r2, pc, #4	; (adr r2, 8000910 <displaySEG7_2+0x18>)
 800090a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090e:	bf00      	nop
 8000910:	08000939 	.word	0x08000939
 8000914:	0800098f 	.word	0x0800098f
 8000918:	080009e5 	.word	0x080009e5
 800091c:	08000a3b 	.word	0x08000a3b
 8000920:	08000a91 	.word	0x08000a91
 8000924:	08000ae7 	.word	0x08000ae7
 8000928:	08000b3d 	.word	0x08000b3d
 800092c:	08000b93 	.word	0x08000b93
 8000930:	08000be9 	.word	0x08000be9
 8000934:	08000c3f 	.word	0x08000c3f
	switch(num)
	{
		case 0:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 );
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093e:	48d5      	ldr	r0, [pc, #852]	; (8000c94 <displaySEG7_2+0x39c>)
 8000940:	f001 fad6 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 );
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094a:	48d2      	ldr	r0, [pc, #840]	; (8000c94 <displaySEG7_2+0x39c>)
 800094c:	f001 fad0 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 );
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000956:	48cf      	ldr	r0, [pc, #828]	; (8000c94 <displaySEG7_2+0x39c>)
 8000958:	f001 faca 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 );
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000962:	48cc      	ldr	r0, [pc, #816]	; (8000c94 <displaySEG7_2+0x39c>)
 8000964:	f001 fac4 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 );
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096e:	48c9      	ldr	r0, [pc, #804]	; (8000c94 <displaySEG7_2+0x39c>)
 8000970:	f001 fabe 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 );
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097a:	48c6      	ldr	r0, [pc, #792]	; (8000c94 <displaySEG7_2+0x39c>)
 800097c:	f001 fab8 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 );
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000986:	48c3      	ldr	r0, [pc, #780]	; (8000c94 <displaySEG7_2+0x39c>)
 8000988:	f001 fab2 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 800098c:	e185      	b.n	8000c9a <displaySEG7_2+0x3a2>

		case 1:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 );
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000994:	48bf      	ldr	r0, [pc, #764]	; (8000c94 <displaySEG7_2+0x39c>)
 8000996:	f001 faab 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 );
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a0:	48bc      	ldr	r0, [pc, #752]	; (8000c94 <displaySEG7_2+0x39c>)
 80009a2:	f001 faa5 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 );
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ac:	48b9      	ldr	r0, [pc, #740]	; (8000c94 <displaySEG7_2+0x39c>)
 80009ae:	f001 fa9f 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 );
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b8:	48b6      	ldr	r0, [pc, #728]	; (8000c94 <displaySEG7_2+0x39c>)
 80009ba:	f001 fa99 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 );
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c4:	48b3      	ldr	r0, [pc, #716]	; (8000c94 <displaySEG7_2+0x39c>)
 80009c6:	f001 fa93 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 );
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d0:	48b0      	ldr	r0, [pc, #704]	; (8000c94 <displaySEG7_2+0x39c>)
 80009d2:	f001 fa8d 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 );
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009dc:	48ad      	ldr	r0, [pc, #692]	; (8000c94 <displaySEG7_2+0x39c>)
 80009de:	f001 fa87 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 80009e2:	e15a      	b.n	8000c9a <displaySEG7_2+0x3a2>

		case 2:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 );
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	48aa      	ldr	r0, [pc, #680]	; (8000c94 <displaySEG7_2+0x39c>)
 80009ec:	f001 fa80 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 );
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f6:	48a7      	ldr	r0, [pc, #668]	; (8000c94 <displaySEG7_2+0x39c>)
 80009f8:	f001 fa7a 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 1 );
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a02:	48a4      	ldr	r0, [pc, #656]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a04:	f001 fa74 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 );
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0e:	48a1      	ldr	r0, [pc, #644]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a10:	f001 fa6e 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 );
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1a:	489e      	ldr	r0, [pc, #632]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a1c:	f001 fa68 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 );
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	489b      	ldr	r0, [pc, #620]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a28:	f001 fa62 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 );
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a32:	4898      	ldr	r0, [pc, #608]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a34:	f001 fa5c 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000a38:	e12f      	b.n	8000c9a <displaySEG7_2+0x3a2>

		case 3:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 );
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a40:	4894      	ldr	r0, [pc, #592]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a42:	f001 fa55 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 );
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4c:	4891      	ldr	r0, [pc, #580]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a4e:	f001 fa4f 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 );
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a58:	488e      	ldr	r0, [pc, #568]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a5a:	f001 fa49 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 );
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a64:	488b      	ldr	r0, [pc, #556]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a66:	f001 fa43 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 );
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4888      	ldr	r0, [pc, #544]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a72:	f001 fa3d 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 );
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4885      	ldr	r0, [pc, #532]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a7e:	f001 fa37 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 );
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a88:	4882      	ldr	r0, [pc, #520]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a8a:	f001 fa31 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000a8e:	e104      	b.n	8000c9a <displaySEG7_2+0x3a2>

		case 4:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 );
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	487f      	ldr	r0, [pc, #508]	; (8000c94 <displaySEG7_2+0x39c>)
 8000a98:	f001 fa2a 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 );
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa2:	487c      	ldr	r0, [pc, #496]	; (8000c94 <displaySEG7_2+0x39c>)
 8000aa4:	f001 fa24 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 );
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aae:	4879      	ldr	r0, [pc, #484]	; (8000c94 <displaySEG7_2+0x39c>)
 8000ab0:	f001 fa1e 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 );
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aba:	4876      	ldr	r0, [pc, #472]	; (8000c94 <displaySEG7_2+0x39c>)
 8000abc:	f001 fa18 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 );
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac6:	4873      	ldr	r0, [pc, #460]	; (8000c94 <displaySEG7_2+0x39c>)
 8000ac8:	f001 fa12 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 );
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad2:	4870      	ldr	r0, [pc, #448]	; (8000c94 <displaySEG7_2+0x39c>)
 8000ad4:	f001 fa0c 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 );
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ade:	486d      	ldr	r0, [pc, #436]	; (8000c94 <displaySEG7_2+0x39c>)
 8000ae0:	f001 fa06 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000ae4:	e0d9      	b.n	8000c9a <displaySEG7_2+0x3a2>
		case 5:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 );
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aec:	4869      	ldr	r0, [pc, #420]	; (8000c94 <displaySEG7_2+0x39c>)
 8000aee:	f001 f9ff 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 );
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af8:	4866      	ldr	r0, [pc, #408]	; (8000c94 <displaySEG7_2+0x39c>)
 8000afa:	f001 f9f9 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 );
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b04:	4863      	ldr	r0, [pc, #396]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b06:	f001 f9f3 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 );
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b10:	4860      	ldr	r0, [pc, #384]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b12:	f001 f9ed 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 );
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1c:	485d      	ldr	r0, [pc, #372]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b1e:	f001 f9e7 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 );
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b28:	485a      	ldr	r0, [pc, #360]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b2a:	f001 f9e1 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 );
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b34:	4857      	ldr	r0, [pc, #348]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b36:	f001 f9db 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000b3a:	e0ae      	b.n	8000c9a <displaySEG7_2+0x3a2>
		case 6:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 );
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b42:	4854      	ldr	r0, [pc, #336]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b44:	f001 f9d4 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 );
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4e:	4851      	ldr	r0, [pc, #324]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b50:	f001 f9ce 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 );
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5a:	484e      	ldr	r0, [pc, #312]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b5c:	f001 f9c8 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 );
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b66:	484b      	ldr	r0, [pc, #300]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b68:	f001 f9c2 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 );
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b72:	4848      	ldr	r0, [pc, #288]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b74:	f001 f9bc 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 );
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	4845      	ldr	r0, [pc, #276]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b80:	f001 f9b6 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 );
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8a:	4842      	ldr	r0, [pc, #264]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b8c:	f001 f9b0 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000b90:	e083      	b.n	8000c9a <displaySEG7_2+0x3a2>
		case 7:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 );
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b98:	483e      	ldr	r0, [pc, #248]	; (8000c94 <displaySEG7_2+0x39c>)
 8000b9a:	f001 f9a9 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 );
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba4:	483b      	ldr	r0, [pc, #236]	; (8000c94 <displaySEG7_2+0x39c>)
 8000ba6:	f001 f9a3 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 );
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb0:	4838      	ldr	r0, [pc, #224]	; (8000c94 <displaySEG7_2+0x39c>)
 8000bb2:	f001 f99d 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 );
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbc:	4835      	ldr	r0, [pc, #212]	; (8000c94 <displaySEG7_2+0x39c>)
 8000bbe:	f001 f997 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 );
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc8:	4832      	ldr	r0, [pc, #200]	; (8000c94 <displaySEG7_2+0x39c>)
 8000bca:	f001 f991 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 );
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	482f      	ldr	r0, [pc, #188]	; (8000c94 <displaySEG7_2+0x39c>)
 8000bd6:	f001 f98b 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 );
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be0:	482c      	ldr	r0, [pc, #176]	; (8000c94 <displaySEG7_2+0x39c>)
 8000be2:	f001 f985 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000be6:	e058      	b.n	8000c9a <displaySEG7_2+0x3a2>
		case 8:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 );
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bee:	4829      	ldr	r0, [pc, #164]	; (8000c94 <displaySEG7_2+0x39c>)
 8000bf0:	f001 f97e 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 );
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfa:	4826      	ldr	r0, [pc, #152]	; (8000c94 <displaySEG7_2+0x39c>)
 8000bfc:	f001 f978 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 );
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	4823      	ldr	r0, [pc, #140]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c08:	f001 f972 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 );
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c12:	4820      	ldr	r0, [pc, #128]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c14:	f001 f96c 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 );
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1e:	481d      	ldr	r0, [pc, #116]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c20:	f001 f966 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 );
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	481a      	ldr	r0, [pc, #104]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c2c:	f001 f960 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 );
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c38:	f001 f95a 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000c3c:	e02d      	b.n	8000c9a <displaySEG7_2+0x3a2>
		case 9:
			HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 );
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c44:	4813      	ldr	r0, [pc, #76]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c46:	f001 f953 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 );
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c52:	f001 f94d 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 );
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c5e:	f001 f947 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 );
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c68:	480a      	ldr	r0, [pc, #40]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c6a:	f001 f941 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 );
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c76:	f001 f93b 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 );
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c82:	f001 f935 	bl	8001ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 );
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	4801      	ldr	r0, [pc, #4]	; (8000c94 <displaySEG7_2+0x39c>)
 8000c8e:	f001 f92f 	bl	8001ef0 <HAL_GPIO_WritePin>
			break;
 8000c92:	e002      	b.n	8000c9a <displaySEG7_2+0x3a2>
 8000c94:	40010c00 	.word	0x40010c00

		default:
			break;
 8000c98:	bf00      	nop
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop

08000ca4 <enable0>:

void enable0()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <enable0+0x20>)
 8000cb0:	f001 f91e 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cba:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <enable0+0x20>)
 8000cbc:	f001 f918 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <enable1>:

void enable1()
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <enable1+0x20>)
 8000cd4:	f001 f90c 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <enable1+0x20>)
 8000ce0:	f001 f906 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40010800 	.word	0x40010800

08000cec <enable2>:

void enable2()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <enable2+0x20>)
 8000cf8:	f001 f8fa 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d02:	4802      	ldr	r0, [pc, #8]	; (8000d0c <enable2+0x20>)
 8000d04:	f001 f8f4 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40010800 	.word	0x40010800

08000d10 <enable3>:

void enable3()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <enable3+0x20>)
 8000d1c:	f001 f8e8 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d26:	4802      	ldr	r0, [pc, #8]	; (8000d30 <enable3+0x20>)
 8000d28:	f001 f8e2 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010800 	.word	0x40010800

08000d34 <showTimeDelay_First>:

void showTimeDelay_First(int first, int second)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	enable0();
 8000d3e:	f7ff ffb1 	bl	8000ca4 <enable0>
	displaySEG7_1(first/10);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <showTimeDelay_First+0x44>)
 8000d46:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4a:	1092      	asrs	r2, r2, #2
 8000d4c:	17db      	asrs	r3, r3, #31
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fc41 	bl	80005d8 <displaySEG7_1>
	enable2();
 8000d56:	f7ff ffc9 	bl	8000cec <enable2>
	displaySEG7_2(second/10);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <showTimeDelay_First+0x44>)
 8000d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d62:	1092      	asrs	r2, r2, #2
 8000d64:	17db      	asrs	r3, r3, #31
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fdc5 	bl	80008f8 <displaySEG7_2>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	66666667 	.word	0x66666667

08000d7c <showTimeDelay_Second>:

void showTimeDelay_Second(int first, int second)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	enable1();
 8000d86:	f7ff ff9f 	bl	8000cc8 <enable1>
	displaySEG7_1(first%10);
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <showTimeDelay_Second+0x58>)
 8000d8e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d92:	1099      	asrs	r1, r3, #2
 8000d94:	17d3      	asrs	r3, r2, #31
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	460b      	mov	r3, r1
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	1ad1      	subs	r1, r2, r3
 8000da2:	4608      	mov	r0, r1
 8000da4:	f7ff fc18 	bl	80005d8 <displaySEG7_1>
	enable3();
 8000da8:	f7ff ffb2 	bl	8000d10 <enable3>
	displaySEG7_2(second%10);
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <showTimeDelay_Second+0x58>)
 8000db0:	fb83 1302 	smull	r1, r3, r3, r2
 8000db4:	1099      	asrs	r1, r3, #2
 8000db6:	17d3      	asrs	r3, r2, #31
 8000db8:	1ac9      	subs	r1, r1, r3
 8000dba:	460b      	mov	r3, r1
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	1ad1      	subs	r1, r2, r3
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	f7ff fd97 	bl	80008f8 <displaySEG7_2>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	66666667 	.word	0x66666667

08000dd8 <setValues>:

int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
	MODE = MODE1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <setValues+0x6c>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]

	mode2Toggle = TOGGLE_INIT;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <setValues+0x70>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
	mode2Seg = SEG_INIT;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <setValues+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
	mode2Increase = INCREASE_INIT;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <setValues+0x78>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]

	mode3Toggle = TOGGLE_INIT;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <setValues+0x7c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
	mode3Seg = SEG_INIT;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <setValues+0x80>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
	mode3Increase = INCREASE_INIT;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <setValues+0x84>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]

	mode4Toggle = TOGGLE_INIT;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <setValues+0x88>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
	mode4Seg = SEG_INIT;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <setValues+0x8c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	mode4Increase = INCREASE_INIT;
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <setValues+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <setValues+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <setValues+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
	seg7AutoState = SEG_INIT;
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <setValues+0x9c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <setValues+0xa0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <setValues+0xa4>)
 8000e30:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <setValues+0xa8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <setValues+0xac>)
 8000e38:	6013      	str	r3, [r2, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000008b 	.word	0x2000008b
 8000e48:	20000090 	.word	0x20000090
 8000e4c:	2000008c 	.word	0x2000008c
 8000e50:	20000098 	.word	0x20000098
 8000e54:	2000008d 	.word	0x2000008d
 8000e58:	20000089 	.word	0x20000089
 8000e5c:	20000092 	.word	0x20000092
 8000e60:	2000008a 	.word	0x2000008a
 8000e64:	2000008e 	.word	0x2000008e
 8000e68:	20000088 	.word	0x20000088
 8000e6c:	20000091 	.word	0x20000091
 8000e70:	2000008f 	.word	0x2000008f
 8000e74:	20000099 	.word	0x20000099
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	2000009c 	.word	0x2000009c
 8000e80:	20000004 	.word	0x20000004
 8000e84:	20000094 	.word	0x20000094

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8c:	f000 fd46 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e90:	f000 f814 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e94:	f000 f89a 	bl	8000fcc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e98:	f000 f84c 	bl	8000f34 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e9c:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <main+0x30>)
 8000e9e:	f001 fc85 	bl	80027ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setTimer0(50);
  setValues();
 8000ea2:	f7ff ff99 	bl	8000dd8 <setValues>
  displayFirstLedCouple(LED_INIT);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff faae 	bl	8000408 <displayFirstLedCouple>
  while (1)
  {
	  autoRun();
 8000eac:	f7ff f94e 	bl	800014c <autoRun>
	  manualRun();
 8000eb0:	f000 fad4 	bl	800145c <manualRun>
	  autoRun();
 8000eb4:	e7fa      	b.n	8000eac <main+0x24>
 8000eb6:	bf00      	nop
 8000eb8:	200000a0 	.word	0x200000a0

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b090      	sub	sp, #64	; 0x40
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0318 	add.w	r3, r7, #24
 8000ec6:	2228      	movs	r2, #40	; 0x28
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 f81e 	bl	8002f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 f82e 	bl	8001f54 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000efe:	f000 f8d3 	bl	80010a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fa9a 	bl	8002454 <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f26:	f000 f8bf 	bl	80010a8 <Error_Handler>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3740      	adds	r7, #64	; 0x40
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f5a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f68:	2209      	movs	r2, #9
 8000f6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f78:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f7a:	f001 fbc7 	bl	800270c <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f84:	f000 f890 	bl	80010a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f96:	f001 fd45 	bl	8002a24 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fa0:	f000 f882 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000fb2:	f001 ff1d 	bl	8002df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fbc:	f000 f874 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000a0 	.word	0x200000a0

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_GPIO_Init+0xbc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a28      	ldr	r2, [pc, #160]	; (8001088 <MX_GPIO_Init+0xbc>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <MX_GPIO_Init+0xbc>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <MX_GPIO_Init+0xbc>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a22      	ldr	r2, [pc, #136]	; (8001088 <MX_GPIO_Init+0xbc>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <MX_GPIO_Init+0xbc>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FIRST_COUPLE_RED_Pin|FIRST_COUPLE_YELLOW_Pin|FIRST_COUPLE_GREEN_Pin|SECOND_COUPLE_RED_Pin
 8001010:	2200      	movs	r2, #0
 8001012:	f24f 01fc 	movw	r1, #61692	; 0xf0fc
 8001016:	481d      	ldr	r0, [pc, #116]	; (800108c <MX_GPIO_Init+0xc0>)
 8001018:	f000 ff6a 	bl	8001ef0 <HAL_GPIO_WritePin>
                          |SECOND_COUPLE_YELLOW_Pin|SECOND_COUPLE_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|C2_Pin
 800101c:	2200      	movs	r2, #0
 800101e:	f647 717f 	movw	r1, #32639	; 0x7f7f
 8001022:	481b      	ldr	r0, [pc, #108]	; (8001090 <MX_GPIO_Init+0xc4>)
 8001024:	f000 ff64 	bl	8001ef0 <HAL_GPIO_WritePin>
                          |A2_Pin|B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FIRST_COUPLE_RED_Pin FIRST_COUPLE_YELLOW_Pin FIRST_COUPLE_GREEN_Pin SECOND_COUPLE_RED_Pin
                           SECOND_COUPLE_YELLOW_Pin SECOND_COUPLE_GREEN_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = FIRST_COUPLE_RED_Pin|FIRST_COUPLE_YELLOW_Pin|FIRST_COUPLE_GREEN_Pin|SECOND_COUPLE_RED_Pin
 8001028:	f24f 03fc 	movw	r3, #61692	; 0xf0fc
 800102c:	60bb      	str	r3, [r7, #8]
                          |SECOND_COUPLE_YELLOW_Pin|SECOND_COUPLE_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2302      	movs	r3, #2
 8001038:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4619      	mov	r1, r3
 8001040:	4812      	ldr	r0, [pc, #72]	; (800108c <MX_GPIO_Init+0xc0>)
 8001042:	f000 fddb 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin C2_Pin
                           D2_Pin E2_Pin F2_Pin G2_Pin
                           D1_Pin E1_Pin F1_Pin G1_Pin
                           A2_Pin B2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|C2_Pin
 8001046:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800104a:	60bb      	str	r3, [r7, #8]
                          |D2_Pin|E2_Pin|F2_Pin|G2_Pin
                          |D1_Pin|E1_Pin|F1_Pin|G1_Pin
                          |A2_Pin|B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2302      	movs	r3, #2
 8001056:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4619      	mov	r1, r3
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_GPIO_Init+0xc4>)
 8001060:	f000 fdcc 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001064:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001068:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106e:	2301      	movs	r3, #1
 8001070:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4619      	mov	r1, r3
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_GPIO_Init+0xc0>)
 800107a:	f000 fdbf 	bl	8001bfc <HAL_GPIO_Init>

}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00

08001094 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	timerRun();
 800109c:	f000 fad0 	bl	8001640 <timerRun>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <mode2_run>:
 */

#include "manual.h"

void mode2_run()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	switch(mode2Toggle)
 80010b8:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <mode2_run+0x11c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <mode2_run+0x12>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d007      	beq.n	80010d4 <mode2_run+0x20>
				toggleLeds(RED);
				setTimer3(25);
			}
			break;
		default:
			break;
 80010c4:	e011      	b.n	80010ea <mode2_run+0x36>
			mode2Toggle = TOGGLE;
 80010c6:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <mode2_run+0x11c>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
			setTimer3(25);
 80010cc:	2019      	movs	r0, #25
 80010ce:	f000 fa3f 	bl	8001550 <setTimer3>
			break;
 80010d2:	e00a      	b.n	80010ea <mode2_run+0x36>
			if(timer3_flag == 1)
 80010d4:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <mode2_run+0x120>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d105      	bne.n	80010e8 <mode2_run+0x34>
				toggleLeds(RED);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff fa4b 	bl	8000578 <toggleLeds>
				setTimer3(25);
 80010e2:	2019      	movs	r0, #25
 80010e4:	f000 fa34 	bl	8001550 <setTimer3>
			break;
 80010e8:	bf00      	nop
	}
	switch(mode2Increase)
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <mode2_run+0x124>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <mode2_run+0x44>
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d00f      	beq.n	8001116 <mode2_run+0x62>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 80010f6:	e02f      	b.n	8001158 <mode2_run+0xa4>
			if(isButtonPressed(1) == 1)
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff f96b 	bl	80003d4 <isButtonPressed>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	d126      	bne.n	8001152 <mode2_run+0x9e>
				mode2Increase = INCREASE;
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <mode2_run+0x124>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
				redDelay +=1;
 800110a:	4b34      	ldr	r3, [pc, #208]	; (80011dc <mode2_run+0x128>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	4a32      	ldr	r2, [pc, #200]	; (80011dc <mode2_run+0x128>)
 8001112:	6013      	str	r3, [r2, #0]
			break;
 8001114:	e01d      	b.n	8001152 <mode2_run+0x9e>
			if(isButtonPressed(1) == 1)
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff f95c 	bl	80003d4 <isButtonPressed>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10b      	bne.n	800113a <mode2_run+0x86>
				redDelay +=1;
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <mode2_run+0x128>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a2c      	ldr	r2, [pc, #176]	; (80011dc <mode2_run+0x128>)
 800112a:	6013      	str	r3, [r2, #0]
				if(redDelay >= 99) redDelay = 1;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <mode2_run+0x128>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b62      	cmp	r3, #98	; 0x62
 8001132:	dd02      	ble.n	800113a <mode2_run+0x86>
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <mode2_run+0x128>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(2) == 1)
 800113a:	2002      	movs	r0, #2
 800113c:	f7ff f94a 	bl	80003d4 <isButtonPressed>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d107      	bne.n	8001156 <mode2_run+0xa2>
				MODE = MODE1;
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <mode2_run+0x12c>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
				setValues();
 800114c:	f7ff fe44 	bl	8000dd8 <setValues>
			break;
 8001150:	e001      	b.n	8001156 <mode2_run+0xa2>
			break;
 8001152:	bf00      	nop
 8001154:	e000      	b.n	8001158 <mode2_run+0xa4>
			break;
 8001156:	bf00      	nop
	}
	switch(mode2Seg)
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <mode2_run+0x130>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d01e      	beq.n	800119e <mode2_run+0xea>
 8001160:	2b02      	cmp	r3, #2
 8001162:	dc2d      	bgt.n	80011c0 <mode2_run+0x10c>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <mode2_run+0xba>
 8001168:	2b01      	cmp	r3, #1
 800116a:	d007      	beq.n	800117c <mode2_run+0xc8>
				setTimer4(25);
				mode2Seg = FIRST;
			}
			break;
		default:
			break;
 800116c:	e028      	b.n	80011c0 <mode2_run+0x10c>
			mode2Seg = FIRST;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <mode2_run+0x130>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
			setTimer4(25);
 8001174:	2019      	movs	r0, #25
 8001176:	f000 f9ff 	bl	8001578 <setTimer4>
			break;
 800117a:	e026      	b.n	80011ca <mode2_run+0x116>
			if(timer4_flag == 1)
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <mode2_run+0x134>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d11f      	bne.n	80011c4 <mode2_run+0x110>
				showTimeDelay_First(1,redDelay);
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <mode2_run+0x128>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fdd2 	bl	8000d34 <showTimeDelay_First>
				mode2Seg = SECOND;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <mode2_run+0x130>)
 8001192:	2202      	movs	r2, #2
 8001194:	701a      	strb	r2, [r3, #0]
				setTimer4(25);
 8001196:	2019      	movs	r0, #25
 8001198:	f000 f9ee 	bl	8001578 <setTimer4>
			break;
 800119c:	e012      	b.n	80011c4 <mode2_run+0x110>
			if(timer4_flag == 1)
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <mode2_run+0x134>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d110      	bne.n	80011c8 <mode2_run+0x114>
				showTimeDelay_Second(1,redDelay);
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <mode2_run+0x128>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fde5 	bl	8000d7c <showTimeDelay_Second>
				setTimer4(25);
 80011b2:	2019      	movs	r0, #25
 80011b4:	f000 f9e0 	bl	8001578 <setTimer4>
				mode2Seg = FIRST;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <mode2_run+0x130>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
			break;
 80011be:	e003      	b.n	80011c8 <mode2_run+0x114>
			break;
 80011c0:	bf00      	nop
 80011c2:	e002      	b.n	80011ca <mode2_run+0x116>
			break;
 80011c4:	bf00      	nop
 80011c6:	e000      	b.n	80011ca <mode2_run+0x116>
			break;
 80011c8:	bf00      	nop
	}
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000090 	.word	0x20000090
 80011d4:	2000004c 	.word	0x2000004c
 80011d8:	20000098 	.word	0x20000098
 80011dc:	20000000 	.word	0x20000000
 80011e0:	2000008b 	.word	0x2000008b
 80011e4:	2000008c 	.word	0x2000008c
 80011e8:	20000050 	.word	0x20000050

080011ec <mode3_run>:

void mode3_run()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	switch(mode3Toggle)
 80011f0:	4b45      	ldr	r3, [pc, #276]	; (8001308 <mode3_run+0x11c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <mode3_run+0x12>
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d007      	beq.n	800120c <mode3_run+0x20>
				toggleLeds(YELLOW);
				setTimer5(25);
			}
			break;
		default:
			break;
 80011fc:	e011      	b.n	8001222 <mode3_run+0x36>
			mode3Toggle = TOGGLE;
 80011fe:	4b42      	ldr	r3, [pc, #264]	; (8001308 <mode3_run+0x11c>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
			setTimer5(25);
 8001204:	2019      	movs	r0, #25
 8001206:	f000 f9cb 	bl	80015a0 <setTimer5>
			break;
 800120a:	e00a      	b.n	8001222 <mode3_run+0x36>
			if(timer5_flag == 1)
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <mode3_run+0x120>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <mode3_run+0x34>
				toggleLeds(YELLOW);
 8001214:	2003      	movs	r0, #3
 8001216:	f7ff f9af 	bl	8000578 <toggleLeds>
				setTimer5(25);
 800121a:	2019      	movs	r0, #25
 800121c:	f000 f9c0 	bl	80015a0 <setTimer5>
			break;
 8001220:	bf00      	nop
	}
	switch(mode3Increase)
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <mode3_run+0x124>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <mode3_run+0x44>
 800122a:	2b01      	cmp	r3, #1
 800122c:	d00f      	beq.n	800124e <mode3_run+0x62>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 800122e:	e02f      	b.n	8001290 <mode3_run+0xa4>
			if(isButtonPressed(1) == 1)
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff f8cf 	bl	80003d4 <isButtonPressed>
 8001236:	4603      	mov	r3, r0
 8001238:	2b01      	cmp	r3, #1
 800123a:	d126      	bne.n	800128a <mode3_run+0x9e>
				mode3Increase = INCREASE;
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <mode3_run+0x124>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
				yellowDelay +=1;
 8001242:	4b34      	ldr	r3, [pc, #208]	; (8001314 <mode3_run+0x128>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a32      	ldr	r2, [pc, #200]	; (8001314 <mode3_run+0x128>)
 800124a:	6013      	str	r3, [r2, #0]
			break;
 800124c:	e01d      	b.n	800128a <mode3_run+0x9e>
			if(isButtonPressed(1) == 1)
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff f8c0 	bl	80003d4 <isButtonPressed>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d10b      	bne.n	8001272 <mode3_run+0x86>
				yellowDelay +=1;
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <mode3_run+0x128>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a2c      	ldr	r2, [pc, #176]	; (8001314 <mode3_run+0x128>)
 8001262:	6013      	str	r3, [r2, #0]
				if(yellowDelay >= 99) yellowDelay = 1;
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <mode3_run+0x128>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b62      	cmp	r3, #98	; 0x62
 800126a:	dd02      	ble.n	8001272 <mode3_run+0x86>
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <mode3_run+0x128>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(2) == 1)
 8001272:	2002      	movs	r0, #2
 8001274:	f7ff f8ae 	bl	80003d4 <isButtonPressed>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <mode3_run+0xa2>
				MODE = MODE1;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <mode3_run+0x12c>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
				setValues();
 8001284:	f7ff fda8 	bl	8000dd8 <setValues>
			break;
 8001288:	e001      	b.n	800128e <mode3_run+0xa2>
			break;
 800128a:	bf00      	nop
 800128c:	e000      	b.n	8001290 <mode3_run+0xa4>
			break;
 800128e:	bf00      	nop
	}
	switch(mode3Seg)
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <mode3_run+0x130>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d01e      	beq.n	80012d6 <mode3_run+0xea>
 8001298:	2b02      	cmp	r3, #2
 800129a:	dc2d      	bgt.n	80012f8 <mode3_run+0x10c>
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <mode3_run+0xba>
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d007      	beq.n	80012b4 <mode3_run+0xc8>
				setTimer6(25);
				mode3Seg = FIRST;
			}
			break;
		default:
			break;
 80012a4:	e028      	b.n	80012f8 <mode3_run+0x10c>
			mode3Seg = FIRST;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <mode3_run+0x130>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
			setTimer6(25);
 80012ac:	2019      	movs	r0, #25
 80012ae:	f000 f98b 	bl	80015c8 <setTimer6>
			break;
 80012b2:	e026      	b.n	8001302 <mode3_run+0x116>
			if(timer6_flag == 1)
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <mode3_run+0x134>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d11f      	bne.n	80012fc <mode3_run+0x110>
				showTimeDelay_First(1,yellowDelay);
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <mode3_run+0x128>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7ff fd36 	bl	8000d34 <showTimeDelay_First>
				mode3Seg = SECOND;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <mode3_run+0x130>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
				setTimer6(25);
 80012ce:	2019      	movs	r0, #25
 80012d0:	f000 f97a 	bl	80015c8 <setTimer6>
			break;
 80012d4:	e012      	b.n	80012fc <mode3_run+0x110>
			if(timer6_flag == 1)
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <mode3_run+0x134>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d110      	bne.n	8001300 <mode3_run+0x114>
				showTimeDelay_Second(1,yellowDelay);
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <mode3_run+0x128>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fd49 	bl	8000d7c <showTimeDelay_Second>
				setTimer6(25);
 80012ea:	2019      	movs	r0, #25
 80012ec:	f000 f96c 	bl	80015c8 <setTimer6>
				mode3Seg = FIRST;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <mode3_run+0x130>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
			break;
 80012f6:	e003      	b.n	8001300 <mode3_run+0x114>
			break;
 80012f8:	bf00      	nop
 80012fa:	e002      	b.n	8001302 <mode3_run+0x116>
			break;
 80012fc:	bf00      	nop
 80012fe:	e000      	b.n	8001302 <mode3_run+0x116>
			break;
 8001300:	bf00      	nop
	}
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000008d 	.word	0x2000008d
 800130c:	20000054 	.word	0x20000054
 8001310:	20000092 	.word	0x20000092
 8001314:	20000008 	.word	0x20000008
 8001318:	2000008b 	.word	0x2000008b
 800131c:	20000089 	.word	0x20000089
 8001320:	20000058 	.word	0x20000058

08001324 <mode4_run>:

void mode4_run()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	switch(mode4Toggle)
 8001328:	4b45      	ldr	r3, [pc, #276]	; (8001440 <mode4_run+0x11c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <mode4_run+0x12>
 8001330:	2b01      	cmp	r3, #1
 8001332:	d007      	beq.n	8001344 <mode4_run+0x20>
				toggleLeds(GREEN);
				setTimer7(25);
			}
			break;
		default:
			break;
 8001334:	e011      	b.n	800135a <mode4_run+0x36>
			mode4Toggle = TOGGLE;
 8001336:	4b42      	ldr	r3, [pc, #264]	; (8001440 <mode4_run+0x11c>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
			setTimer7(25);
 800133c:	2019      	movs	r0, #25
 800133e:	f000 f957 	bl	80015f0 <setTimer7>
			break;
 8001342:	e00a      	b.n	800135a <mode4_run+0x36>
			if(timer7_flag == 1)
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <mode4_run+0x120>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <mode4_run+0x34>
				toggleLeds(GREEN);
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff f913 	bl	8000578 <toggleLeds>
				setTimer7(25);
 8001352:	2019      	movs	r0, #25
 8001354:	f000 f94c 	bl	80015f0 <setTimer7>
			break;
 8001358:	bf00      	nop
	}
	switch(mode4Increase)
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <mode4_run+0x124>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <mode4_run+0x44>
 8001362:	2b01      	cmp	r3, #1
 8001364:	d00f      	beq.n	8001386 <mode4_run+0x62>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 8001366:	e02f      	b.n	80013c8 <mode4_run+0xa4>
			if(isButtonPressed(1) == 1)
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff f833 	bl	80003d4 <isButtonPressed>
 800136e:	4603      	mov	r3, r0
 8001370:	2b01      	cmp	r3, #1
 8001372:	d126      	bne.n	80013c2 <mode4_run+0x9e>
				mode4Increase = INCREASE;
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <mode4_run+0x124>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
				greenDelay +=1;
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <mode4_run+0x128>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a32      	ldr	r2, [pc, #200]	; (800144c <mode4_run+0x128>)
 8001382:	6013      	str	r3, [r2, #0]
			break;
 8001384:	e01d      	b.n	80013c2 <mode4_run+0x9e>
			if(isButtonPressed(1) == 1)
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff f824 	bl	80003d4 <isButtonPressed>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10b      	bne.n	80013aa <mode4_run+0x86>
				greenDelay +=1;
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <mode4_run+0x128>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a2c      	ldr	r2, [pc, #176]	; (800144c <mode4_run+0x128>)
 800139a:	6013      	str	r3, [r2, #0]
				if(greenDelay >= 99) greenDelay = 1;
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <mode4_run+0x128>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b62      	cmp	r3, #98	; 0x62
 80013a2:	dd02      	ble.n	80013aa <mode4_run+0x86>
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <mode4_run+0x128>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(2) == 1)
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff f812 	bl	80003d4 <isButtonPressed>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <mode4_run+0xa2>
				MODE = MODE1;
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <mode4_run+0x12c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
				setValues();
 80013bc:	f7ff fd0c 	bl	8000dd8 <setValues>
			break;
 80013c0:	e001      	b.n	80013c6 <mode4_run+0xa2>
			break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <mode4_run+0xa4>
			break;
 80013c6:	bf00      	nop
	}
	switch(mode4Seg)
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <mode4_run+0x130>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d01e      	beq.n	800140e <mode4_run+0xea>
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	dc2d      	bgt.n	8001430 <mode4_run+0x10c>
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <mode4_run+0xba>
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d007      	beq.n	80013ec <mode4_run+0xc8>
				setTimer8(25);
				mode4Seg = FIRST;
			}
			break;
		default:
			break;
 80013dc:	e028      	b.n	8001430 <mode4_run+0x10c>
			mode4Seg = FIRST;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <mode4_run+0x130>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
			setTimer8(25);
 80013e4:	2019      	movs	r0, #25
 80013e6:	f000 f917 	bl	8001618 <setTimer8>
			break;
 80013ea:	e026      	b.n	800143a <mode4_run+0x116>
			if(timer8_flag == 1)
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <mode4_run+0x134>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d11f      	bne.n	8001434 <mode4_run+0x110>
				showTimeDelay_First(1,greenDelay);
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <mode4_run+0x128>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff fc9a 	bl	8000d34 <showTimeDelay_First>
				mode4Seg = SECOND;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <mode4_run+0x130>)
 8001402:	2202      	movs	r2, #2
 8001404:	701a      	strb	r2, [r3, #0]
				setTimer8(25);
 8001406:	2019      	movs	r0, #25
 8001408:	f000 f906 	bl	8001618 <setTimer8>
			break;
 800140c:	e012      	b.n	8001434 <mode4_run+0x110>
			if(timer8_flag == 1)
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <mode4_run+0x134>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d110      	bne.n	8001438 <mode4_run+0x114>
				showTimeDelay_Second(1,greenDelay);
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <mode4_run+0x128>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff fcad 	bl	8000d7c <showTimeDelay_Second>
				setTimer8(25);
 8001422:	2019      	movs	r0, #25
 8001424:	f000 f8f8 	bl	8001618 <setTimer8>
				mode4Seg = FIRST;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <mode4_run+0x130>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
			break;
 800142e:	e003      	b.n	8001438 <mode4_run+0x114>
			break;
 8001430:	bf00      	nop
 8001432:	e002      	b.n	800143a <mode4_run+0x116>
			break;
 8001434:	bf00      	nop
 8001436:	e000      	b.n	800143a <mode4_run+0x116>
			break;
 8001438:	bf00      	nop
	}
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000008a 	.word	0x2000008a
 8001444:	2000005c 	.word	0x2000005c
 8001448:	20000088 	.word	0x20000088
 800144c:	20000004 	.word	0x20000004
 8001450:	2000008b 	.word	0x2000008b
 8001454:	2000008e 	.word	0x2000008e
 8001458:	20000060 	.word	0x20000060

0800145c <manualRun>:

void manualRun()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	switch(MODE)
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <manualRun+0x78>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d01e      	beq.n	80014a6 <manualRun+0x4a>
 8001468:	2b04      	cmp	r3, #4
 800146a:	dc2a      	bgt.n	80014c2 <manualRun+0x66>
 800146c:	2b02      	cmp	r3, #2
 800146e:	d002      	beq.n	8001476 <manualRun+0x1a>
 8001470:	2b03      	cmp	r3, #3
 8001472:	d00c      	beq.n	800148e <manualRun+0x32>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 8001474:	e025      	b.n	80014c2 <manualRun+0x66>
			mode2_run();
 8001476:	f7ff fe1d 	bl	80010b4 <mode2_run>
			if(isButtonPressed(0) == 1)
 800147a:	2000      	movs	r0, #0
 800147c:	f7fe ffaa 	bl	80003d4 <isButtonPressed>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d11f      	bne.n	80014c6 <manualRun+0x6a>
				MODE = MODE3;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <manualRun+0x78>)
 8001488:	2203      	movs	r2, #3
 800148a:	701a      	strb	r2, [r3, #0]
			break;
 800148c:	e01b      	b.n	80014c6 <manualRun+0x6a>
			mode3_run();
 800148e:	f7ff fead 	bl	80011ec <mode3_run>
			if(isButtonPressed(0) == 1)
 8001492:	2000      	movs	r0, #0
 8001494:	f7fe ff9e 	bl	80003d4 <isButtonPressed>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d115      	bne.n	80014ca <manualRun+0x6e>
				MODE = MODE4;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <manualRun+0x78>)
 80014a0:	2204      	movs	r2, #4
 80014a2:	701a      	strb	r2, [r3, #0]
			break;
 80014a4:	e011      	b.n	80014ca <manualRun+0x6e>
			mode4_run();
 80014a6:	f7ff ff3d 	bl	8001324 <mode4_run>
			if(isButtonPressed(0) == 1)
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7fe ff92 	bl	80003d4 <isButtonPressed>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d10b      	bne.n	80014ce <manualRun+0x72>
				MODE = MODE1;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <manualRun+0x78>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
				setValues();
 80014bc:	f7ff fc8c 	bl	8000dd8 <setValues>
			break;
 80014c0:	e005      	b.n	80014ce <manualRun+0x72>
			break;
 80014c2:	bf00      	nop
 80014c4:	e004      	b.n	80014d0 <manualRun+0x74>
			break;
 80014c6:	bf00      	nop
 80014c8:	e002      	b.n	80014d0 <manualRun+0x74>
			break;
 80014ca:	bf00      	nop
 80014cc:	e000      	b.n	80014d0 <manualRun+0x74>
			break;
 80014ce:	bf00      	nop
	}
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000008b 	.word	0x2000008b

080014d8 <setTimer0>:
//timer 0
int timer0_counter = 0;
int timer0_flag = 0;

void setTimer0(int duration)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 80014e0:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <setTimer0+0x20>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <setTimer0+0x24>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000064 	.word	0x20000064
 80014fc:	20000040 	.word	0x20000040

08001500 <setTimer1>:
//timer 1
int timer1_counter = 0;
int timer1_flag = 0;

void setTimer1(int duration)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <setTimer1+0x20>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <setTimer1+0x24>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000068 	.word	0x20000068
 8001524:	20000044 	.word	0x20000044

08001528 <setTimer2>:
//timer 2
int timer2_counter = 0;
int timer2_flag = 0;

void setTimer2(int duration)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001530:	4a05      	ldr	r2, [pc, #20]	; (8001548 <setTimer2+0x20>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <setTimer2+0x24>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2000006c 	.word	0x2000006c
 800154c:	20000048 	.word	0x20000048

08001550 <setTimer3>:
//timer 3
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer3(int duration)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001558:	4a05      	ldr	r2, [pc, #20]	; (8001570 <setTimer3+0x20>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <setTimer3+0x24>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000070 	.word	0x20000070
 8001574:	2000004c 	.word	0x2000004c

08001578 <setTimer4>:
//timer 4
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer4(int duration)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001580:	4a05      	ldr	r2, [pc, #20]	; (8001598 <setTimer4+0x20>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <setTimer4+0x24>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000074 	.word	0x20000074
 800159c:	20000050 	.word	0x20000050

080015a0 <setTimer5>:
//timer 5
int timer5_counter = 0;
int timer5_flag = 0;

void setTimer5(int duration)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 80015a8:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <setTimer5+0x20>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <setTimer5+0x24>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000078 	.word	0x20000078
 80015c4:	20000054 	.word	0x20000054

080015c8 <setTimer6>:
//timer 6
int timer6_counter = 0;
int timer6_flag = 0;

void setTimer6(int duration)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 80015d0:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <setTimer6+0x20>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <setTimer6+0x24>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000007c 	.word	0x2000007c
 80015ec:	20000058 	.word	0x20000058

080015f0 <setTimer7>:
//timer 7
int timer7_counter = 0;
int timer7_flag = 0;

void setTimer7(int duration)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	timer7_counter = duration;
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <setTimer7+0x20>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <setTimer7+0x24>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000080 	.word	0x20000080
 8001614:	2000005c 	.word	0x2000005c

08001618 <setTimer8>:
//timer 8
int timer8_counter = 0;
int timer8_flag = 0;

void setTimer8(int duration)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	timer8_counter = duration;
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <setTimer8+0x20>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <setTimer8+0x24>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000084 	.word	0x20000084
 800163c:	20000060 	.word	0x20000060

08001640 <timerRun>:



void timerRun()
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
	if(timer0_counter > 0)
 8001644:	4b49      	ldr	r3, [pc, #292]	; (800176c <timerRun+0x12c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	dd0b      	ble.n	8001664 <timerRun+0x24>
	{
		timer0_counter--;
 800164c:	4b47      	ldr	r3, [pc, #284]	; (800176c <timerRun+0x12c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	4a46      	ldr	r2, [pc, #280]	; (800176c <timerRun+0x12c>)
 8001654:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0)
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <timerRun+0x12c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	dc02      	bgt.n	8001664 <timerRun+0x24>
		{
			timer0_flag = 1;
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <timerRun+0x130>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0)
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <timerRun+0x134>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	dd0b      	ble.n	8001684 <timerRun+0x44>
	{
		timer1_counter--;
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <timerRun+0x134>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	4a40      	ldr	r2, [pc, #256]	; (8001774 <timerRun+0x134>)
 8001674:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0)
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <timerRun+0x134>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	dc02      	bgt.n	8001684 <timerRun+0x44>
		{
			timer1_flag = 1;
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <timerRun+0x138>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0)
 8001684:	4b3d      	ldr	r3, [pc, #244]	; (800177c <timerRun+0x13c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd0b      	ble.n	80016a4 <timerRun+0x64>
	{
		timer2_counter--;
 800168c:	4b3b      	ldr	r3, [pc, #236]	; (800177c <timerRun+0x13c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	4a3a      	ldr	r2, [pc, #232]	; (800177c <timerRun+0x13c>)
 8001694:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 8001696:	4b39      	ldr	r3, [pc, #228]	; (800177c <timerRun+0x13c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dc02      	bgt.n	80016a4 <timerRun+0x64>
		{
			timer2_flag = 1;
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <timerRun+0x140>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0)
 80016a4:	4b37      	ldr	r3, [pc, #220]	; (8001784 <timerRun+0x144>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	dd0b      	ble.n	80016c4 <timerRun+0x84>
	{
		timer3_counter--;
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <timerRun+0x144>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	4a34      	ldr	r2, [pc, #208]	; (8001784 <timerRun+0x144>)
 80016b4:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0)
 80016b6:	4b33      	ldr	r3, [pc, #204]	; (8001784 <timerRun+0x144>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	dc02      	bgt.n	80016c4 <timerRun+0x84>
		{
			timer3_flag = 1;
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <timerRun+0x148>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0)
 80016c4:	4b31      	ldr	r3, [pc, #196]	; (800178c <timerRun+0x14c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	dd0b      	ble.n	80016e4 <timerRun+0xa4>
	{
		timer4_counter--;
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <timerRun+0x14c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	4a2e      	ldr	r2, [pc, #184]	; (800178c <timerRun+0x14c>)
 80016d4:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <timerRun+0x14c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	dc02      	bgt.n	80016e4 <timerRun+0xa4>
		{
			timer4_flag = 1;
 80016de:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <timerRun+0x150>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0)
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <timerRun+0x154>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	dd0b      	ble.n	8001704 <timerRun+0xc4>
	{
		timer5_counter--;
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <timerRun+0x154>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	4a28      	ldr	r2, [pc, #160]	; (8001794 <timerRun+0x154>)
 80016f4:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0)
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <timerRun+0x154>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	dc02      	bgt.n	8001704 <timerRun+0xc4>
		{
			timer5_flag = 1;
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <timerRun+0x158>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0)
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <timerRun+0x15c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	dd0b      	ble.n	8001724 <timerRun+0xe4>
	{
		timer6_counter--;
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <timerRun+0x15c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	4a22      	ldr	r2, [pc, #136]	; (800179c <timerRun+0x15c>)
 8001714:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <timerRun+0x15c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	dc02      	bgt.n	8001724 <timerRun+0xe4>
			timer6_flag = 1;
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <timerRun+0x160>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0)
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <timerRun+0x164>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	dd0b      	ble.n	8001744 <timerRun+0x104>
	{
		timer7_counter--;
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <timerRun+0x164>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3b01      	subs	r3, #1
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <timerRun+0x164>)
 8001734:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0)
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <timerRun+0x164>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	dc02      	bgt.n	8001744 <timerRun+0x104>
		{
			timer7_flag = 1;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <timerRun+0x168>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer8_counter > 0)
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <timerRun+0x16c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	dd0b      	ble.n	8001764 <timerRun+0x124>
	{
		timer8_counter--;
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <timerRun+0x16c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3b01      	subs	r3, #1
 8001752:	4a16      	ldr	r2, [pc, #88]	; (80017ac <timerRun+0x16c>)
 8001754:	6013      	str	r3, [r2, #0]
		if(timer8_counter <= 0)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <timerRun+0x16c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	dc02      	bgt.n	8001764 <timerRun+0x124>
		{
			timer8_flag = 1;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <timerRun+0x170>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000064 	.word	0x20000064
 8001770:	20000040 	.word	0x20000040
 8001774:	20000068 	.word	0x20000068
 8001778:	20000044 	.word	0x20000044
 800177c:	2000006c 	.word	0x2000006c
 8001780:	20000048 	.word	0x20000048
 8001784:	20000070 	.word	0x20000070
 8001788:	2000004c 	.word	0x2000004c
 800178c:	20000074 	.word	0x20000074
 8001790:	20000050 	.word	0x20000050
 8001794:	20000078 	.word	0x20000078
 8001798:	20000054 	.word	0x20000054
 800179c:	2000007c 	.word	0x2000007c
 80017a0:	20000058 	.word	0x20000058
 80017a4:	20000080 	.word	0x20000080
 80017a8:	2000005c 	.word	0x2000005c
 80017ac:	20000084 	.word	0x20000084
 80017b0:	20000060 	.word	0x20000060

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_MspInit+0x5c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_MspInit+0x5c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_MspInit+0x5c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_MspInit+0x5c>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_MspInit+0x5c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_MspInit+0x5c>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_MspInit+0x60>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_MspInit+0x60>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000

08001818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001828:	d113      	bne.n	8001852 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_TIM_Base_MspInit+0x44>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_TIM_Base_MspInit+0x44>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_TIM_Base_MspInit+0x44>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	201c      	movs	r0, #28
 8001848:	f000 f9a1 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800184c:	201c      	movs	r0, #28
 800184e:	f000 f9ba 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <NMI_Handler+0x4>

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler+0x4>

08001872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <UsageFault_Handler+0x4>

0800187e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 f87f 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM2_IRQHandler+0x10>)
 80018b6:	f000 ffc5 	bl	8002844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200000a0 	.word	0x200000a0

080018c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d0:	f7ff fff8 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018d6:	490c      	ldr	r1, [pc, #48]	; (8001908 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <LoopFillZerobss+0x16>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018ec:	4c09      	ldr	r4, [pc, #36]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fa:	f001 fae3 	bl	8002ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fe:	f7ff fac3 	bl	8000e88 <main>
  bx lr
 8001902:	4770      	bx	lr
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800190c:	08002f60 	.word	0x08002f60
  ldr r2, =_sbss
 8001910:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001914:	200000ec 	.word	0x200000ec

08001918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_2_IRQHandler>
	...

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_Init+0x28>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_Init+0x28>)
 8001926:	f043 0310 	orr.w	r3, r3, #16
 800192a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f923 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	200f      	movs	r0, #15
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff ff3c 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f93b 	bl	8001be2 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f903 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	20000014 	.word	0x20000014
 80019a4:	20000010 	.word	0x20000010

080019a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_IncTick+0x1c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_IncTick+0x20>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <HAL_IncTick+0x20>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	20000014 	.word	0x20000014
 80019c8:	200000e8 	.word	0x200000e8

080019cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <HAL_GetTick+0x10>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	200000e8 	.word	0x200000e8

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4906      	ldr	r1, [pc, #24]	; (8001a78 <__NVIC_EnableIRQ+0x34>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff90 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff2d 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff42 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff90 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5f 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff35 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffa2 	bl	8001b34 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	e148      	b.n	8001ea2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c10:	2201      	movs	r2, #1
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8137 	bne.w	8001e9c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4aa3      	ldr	r2, [pc, #652]	; (8001ec0 <HAL_GPIO_Init+0x2c4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d05e      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c38:	4aa1      	ldr	r2, [pc, #644]	; (8001ec0 <HAL_GPIO_Init+0x2c4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d875      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c3e:	4aa1      	ldr	r2, [pc, #644]	; (8001ec4 <HAL_GPIO_Init+0x2c8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d058      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c44:	4a9f      	ldr	r2, [pc, #636]	; (8001ec4 <HAL_GPIO_Init+0x2c8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d86f      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c4a:	4a9f      	ldr	r2, [pc, #636]	; (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d052      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c50:	4a9d      	ldr	r2, [pc, #628]	; (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d869      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c56:	4a9d      	ldr	r2, [pc, #628]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c5c:	4a9b      	ldr	r2, [pc, #620]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d863      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c62:	4a9b      	ldr	r2, [pc, #620]	; (8001ed0 <HAL_GPIO_Init+0x2d4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d046      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c68:	4a99      	ldr	r2, [pc, #612]	; (8001ed0 <HAL_GPIO_Init+0x2d4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d85d      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d82a      	bhi.n	8001cc8 <HAL_GPIO_Init+0xcc>
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d859      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_GPIO_Init+0x80>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cd1 	.word	0x08001cd1
 8001c84:	08001ce3 	.word	0x08001ce3
 8001c88:	08001d25 	.word	0x08001d25
 8001c8c:	08001d2b 	.word	0x08001d2b
 8001c90:	08001d2b 	.word	0x08001d2b
 8001c94:	08001d2b 	.word	0x08001d2b
 8001c98:	08001d2b 	.word	0x08001d2b
 8001c9c:	08001d2b 	.word	0x08001d2b
 8001ca0:	08001d2b 	.word	0x08001d2b
 8001ca4:	08001d2b 	.word	0x08001d2b
 8001ca8:	08001d2b 	.word	0x08001d2b
 8001cac:	08001d2b 	.word	0x08001d2b
 8001cb0:	08001d2b 	.word	0x08001d2b
 8001cb4:	08001d2b 	.word	0x08001d2b
 8001cb8:	08001d2b 	.word	0x08001d2b
 8001cbc:	08001d2b 	.word	0x08001d2b
 8001cc0:	08001cd9 	.word	0x08001cd9
 8001cc4:	08001ced 	.word	0x08001ced
 8001cc8:	4a82      	ldr	r2, [pc, #520]	; (8001ed4 <HAL_GPIO_Init+0x2d8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cce:	e02c      	b.n	8001d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e029      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e024      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e01f      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	330c      	adds	r3, #12
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e01a      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e013      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	611a      	str	r2, [r3, #16]
          break;
 8001d16:	e009      	b.n	8001d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	615a      	str	r2, [r3, #20]
          break;
 8001d22:	e003      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          break;
 8001d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d801      	bhi.n	8001d36 <HAL_GPIO_Init+0x13a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	e001      	b.n	8001d3a <HAL_GPIO_Init+0x13e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d802      	bhi.n	8001d48 <HAL_GPIO_Init+0x14c>
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x152>
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	210f      	movs	r1, #15
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8090 	beq.w	8001e9c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7c:	4b56      	ldr	r3, [pc, #344]	; (8001ed8 <HAL_GPIO_Init+0x2dc>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a55      	ldr	r2, [pc, #340]	; (8001ed8 <HAL_GPIO_Init+0x2dc>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_GPIO_Init+0x2dc>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d94:	4a51      	ldr	r2, [pc, #324]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a49      	ldr	r2, [pc, #292]	; (8001ee0 <HAL_GPIO_Init+0x2e4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00d      	beq.n	8001ddc <HAL_GPIO_Init+0x1e0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a48      	ldr	r2, [pc, #288]	; (8001ee4 <HAL_GPIO_Init+0x2e8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d007      	beq.n	8001dd8 <HAL_GPIO_Init+0x1dc>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a47      	ldr	r2, [pc, #284]	; (8001ee8 <HAL_GPIO_Init+0x2ec>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_GPIO_Init+0x1d8>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e004      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e002      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_GPIO_Init+0x1e2>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4093      	lsls	r3, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dee:	493b      	ldr	r1, [pc, #236]	; (8001edc <HAL_GPIO_Init+0x2e0>)
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e08:	4b38      	ldr	r3, [pc, #224]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	4937      	ldr	r1, [pc, #220]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e16:	4b35      	ldr	r3, [pc, #212]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4933      	ldr	r1, [pc, #204]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	492d      	ldr	r1, [pc, #180]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4929      	ldr	r1, [pc, #164]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4923      	ldr	r1, [pc, #140]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	491f      	ldr	r1, [pc, #124]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4919      	ldr	r1, [pc, #100]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4915      	ldr	r1, [pc, #84]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f aeaf 	bne.w	8001c10 <HAL_GPIO_Init+0x14>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	372c      	adds	r7, #44	; 0x2c
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	10320000 	.word	0x10320000
 8001ec4:	10310000 	.word	0x10310000
 8001ec8:	10220000 	.word	0x10220000
 8001ecc:	10210000 	.word	0x10210000
 8001ed0:	10120000 	.word	0x10120000
 8001ed4:	10110000 	.word	0x10110000
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40010800 	.word	0x40010800
 8001ee4:	40010c00 	.word	0x40010c00
 8001ee8:	40011000 	.word	0x40011000
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0c:	e003      	b.n	8001f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43d9      	mvns	r1, r3
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	400b      	ands	r3, r1
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	611a      	str	r2, [r3, #16]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e26c      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8087 	beq.w	8002082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f74:	4b92      	ldr	r3, [pc, #584]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d00c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f80:	4b8f      	ldr	r3, [pc, #572]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d112      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x5e>
 8001f8c:	4b8c      	ldr	r3, [pc, #560]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f98:	d10b      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9a:	4b89      	ldr	r3, [pc, #548]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d06c      	beq.n	8002080 <HAL_RCC_OscConfig+0x12c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d168      	bne.n	8002080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e246      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x76>
 8001fbc:	4b80      	ldr	r3, [pc, #512]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a7f      	ldr	r2, [pc, #508]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e02e      	b.n	8002028 <HAL_RCC_OscConfig+0xd4>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x98>
 8001fd2:	4b7b      	ldr	r3, [pc, #492]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a7a      	ldr	r2, [pc, #488]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b78      	ldr	r3, [pc, #480]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a77      	ldr	r2, [pc, #476]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e01d      	b.n	8002028 <HAL_RCC_OscConfig+0xd4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0xbc>
 8001ff6:	4b72      	ldr	r3, [pc, #456]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a71      	ldr	r2, [pc, #452]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6e      	ldr	r2, [pc, #440]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0xd4>
 8002010:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6a      	ldr	r2, [pc, #424]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fccc 	bl	80019cc <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff fcc8 	bl	80019cc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1fa      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0xe4>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fcb8 	bl	80019cc <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff fcb4 	bl	80019cc <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1e6      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x10c>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d063      	beq.n	8002156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208e:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800209a:	4b49      	ldr	r3, [pc, #292]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d11c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x18c>
 80020a6:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x176>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e1ba      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4939      	ldr	r1, [pc, #228]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	e03a      	b.n	8002156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e8:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <HAL_RCC_OscConfig+0x270>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff fc6d 	bl	80019cc <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff fc69 	bl	80019cc <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e19b      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4927      	ldr	r1, [pc, #156]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <HAL_RCC_OscConfig+0x270>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fc4c 	bl	80019cc <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002138:	f7ff fc48 	bl	80019cc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e17a      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d03a      	beq.n	80021d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d019      	beq.n	800219e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <HAL_RCC_OscConfig+0x274>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002170:	f7ff fc2c 	bl	80019cc <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002178:	f7ff fc28 	bl	80019cc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e15a      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002196:	2001      	movs	r0, #1
 8002198:	f000 fa9a 	bl	80026d0 <RCC_Delay>
 800219c:	e01c      	b.n	80021d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_RCC_OscConfig+0x274>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7ff fc12 	bl	80019cc <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021aa:	e00f      	b.n	80021cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7ff fc0e 	bl	80019cc <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d908      	bls.n	80021cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e140      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	42420000 	.word	0x42420000
 80021c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021cc:	4b9e      	ldr	r3, [pc, #632]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e9      	bne.n	80021ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a6 	beq.w	8002332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ea:	4b97      	ldr	r3, [pc, #604]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10d      	bne.n	8002212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	4b94      	ldr	r3, [pc, #592]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a93      	ldr	r2, [pc, #588]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	4b91      	ldr	r3, [pc, #580]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b8e      	ldr	r3, [pc, #568]	; (800244c <HAL_RCC_OscConfig+0x4f8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221e:	4b8b      	ldr	r3, [pc, #556]	; (800244c <HAL_RCC_OscConfig+0x4f8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a8a      	ldr	r2, [pc, #552]	; (800244c <HAL_RCC_OscConfig+0x4f8>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7ff fbcf 	bl	80019cc <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002232:	f7ff fbcb 	bl	80019cc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b64      	cmp	r3, #100	; 0x64
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0fd      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	4b81      	ldr	r3, [pc, #516]	; (800244c <HAL_RCC_OscConfig+0x4f8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x312>
 8002258:	4b7b      	ldr	r3, [pc, #492]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4a7a      	ldr	r2, [pc, #488]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6213      	str	r3, [r2, #32]
 8002264:	e02d      	b.n	80022c2 <HAL_RCC_OscConfig+0x36e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x334>
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a75      	ldr	r2, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	4b73      	ldr	r3, [pc, #460]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4a72      	ldr	r2, [pc, #456]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6213      	str	r3, [r2, #32]
 8002286:	e01c      	b.n	80022c2 <HAL_RCC_OscConfig+0x36e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b05      	cmp	r3, #5
 800228e:	d10c      	bne.n	80022aa <HAL_RCC_OscConfig+0x356>
 8002290:	4b6d      	ldr	r3, [pc, #436]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a6c      	ldr	r2, [pc, #432]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	6213      	str	r3, [r2, #32]
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4a69      	ldr	r2, [pc, #420]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6213      	str	r3, [r2, #32]
 80022a8:	e00b      	b.n	80022c2 <HAL_RCC_OscConfig+0x36e>
 80022aa:	4b67      	ldr	r3, [pc, #412]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a66      	ldr	r2, [pc, #408]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	4b64      	ldr	r3, [pc, #400]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4a63      	ldr	r2, [pc, #396]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d015      	beq.n	80022f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7ff fb7f 	bl	80019cc <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7ff fb7b 	bl	80019cc <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0ab      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	4b57      	ldr	r3, [pc, #348]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ee      	beq.n	80022d2 <HAL_RCC_OscConfig+0x37e>
 80022f4:	e014      	b.n	8002320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7ff fb69 	bl	80019cc <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7ff fb65 	bl	80019cc <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	f241 3288 	movw	r2, #5000	; 0x1388
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e095      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	4b4c      	ldr	r3, [pc, #304]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ee      	bne.n	80022fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b48      	ldr	r3, [pc, #288]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4a47      	ldr	r2, [pc, #284]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8081 	beq.w	800243e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d061      	beq.n	800240c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d146      	bne.n	80023de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <HAL_RCC_OscConfig+0x4fc>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff fb39 	bl	80019cc <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7ff fb35 	bl	80019cc <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e067      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	4b35      	ldr	r3, [pc, #212]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002384:	d108      	bne.n	8002398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	492d      	ldr	r1, [pc, #180]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a19      	ldr	r1, [r3, #32]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	430b      	orrs	r3, r1
 80023aa:	4927      	ldr	r1, [pc, #156]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCC_OscConfig+0x4fc>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7ff fb09 	bl	80019cc <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7ff fb05 	bl	80019cc <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e037      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d0:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x46a>
 80023dc:	e02f      	b.n	800243e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_RCC_OscConfig+0x4fc>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7ff faf2 	bl	80019cc <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ec:	f7ff faee 	bl	80019cc <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e020      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x498>
 800240a:	e018      	b.n	800243e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e013      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	429a      	cmp	r2, r3
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	40007000 	.word	0x40007000
 8002450:	42420060 	.word	0x42420060

08002454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0d0      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d910      	bls.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b67      	ldr	r3, [pc, #412]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 0207 	bic.w	r2, r3, #7
 800247e:	4965      	ldr	r1, [pc, #404]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b8      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a52      	ldr	r2, [pc, #328]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494d      	ldr	r1, [pc, #308]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d040      	beq.n	8002574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07f      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e073      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06b      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4936      	ldr	r1, [pc, #216]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002544:	f7ff fa42 	bl	80019cc <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7ff fa3e 	bl	80019cc <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e053      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b27      	ldr	r3, [pc, #156]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d210      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4922      	ldr	r1, [pc, #136]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e032      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4916      	ldr	r1, [pc, #88]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490e      	ldr	r1, [pc, #56]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 f821 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490a      	ldr	r1, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1cc>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1d0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f9a0 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
 800261c:	08002f34 	.word	0x08002f34
 8002620:	2000000c 	.word	0x2000000c
 8002624:	20000010 	.word	0x20000010

08002628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x30>
 8002652:	2b08      	cmp	r3, #8
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x36>
 8002656:	e027      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800265a:	613b      	str	r3, [r7, #16]
      break;
 800265c:	e027      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	0c9b      	lsrs	r3, r3, #18
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002668:	5cd3      	ldrb	r3, [r2, r3]
 800266a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d010      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0c5b      	lsrs	r3, r3, #17
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800268a:	fb02 f203 	mul.w	r2, r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e004      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	613b      	str	r3, [r7, #16]
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026aa:	613b      	str	r3, [r7, #16]
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	693b      	ldr	r3, [r7, #16]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	007a1200 	.word	0x007a1200
 80026c4:	08002f44 	.word	0x08002f44
 80026c8:	08002f54 	.word	0x08002f54
 80026cc:	003d0900 	.word	0x003d0900

080026d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <RCC_Delay+0x34>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <RCC_Delay+0x38>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a5b      	lsrs	r3, r3, #9
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026ec:	bf00      	nop
  }
  while (Delay --);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	60fa      	str	r2, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <RCC_Delay+0x1c>
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	2000000c 	.word	0x2000000c
 8002708:	10624dd3 	.word	0x10624dd3

0800270c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e041      	b.n	80027a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff f870 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 fa56 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d001      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e035      	b.n	8002830 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_TIM_Base_Start_IT+0x90>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_TIM_Base_Start_IT+0x4e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ee:	d004      	beq.n	80027fa <HAL_TIM_Base_Start_IT+0x4e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a12      	ldr	r2, [pc, #72]	; (8002840 <HAL_TIM_Base_Start_IT+0x94>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d111      	bne.n	800281e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b06      	cmp	r3, #6
 800280a:	d010      	beq.n	800282e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281c:	e007      	b.n	800282e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40000400 	.word	0x40000400

08002844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d020      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0202 	mvn.w	r2, #2
 8002878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f998 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002894:	e005      	b.n	80028a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f98b 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f99a 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d020      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0204 	mvn.w	r2, #4
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f972 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f965 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f974 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0208 	mvn.w	r2, #8
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f94c 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f93f 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f94e 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0210 	mvn.w	r2, #16
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2208      	movs	r2, #8
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f926 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f919 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f928 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00c      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0201 	mvn.w	r2, #1
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fb72 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00c      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa6f 	bl	8002eb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8f8 	bl	8002be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0220 	mvn.w	r2, #32
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa42 	bl	8002ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_TIM_ConfigClockSource+0x1c>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0b4      	b.n	8002baa <HAL_TIM_ConfigClockSource+0x186>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a78:	d03e      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0xd4>
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	f200 8087 	bhi.w	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a86:	f000 8086 	beq.w	8002b96 <HAL_TIM_ConfigClockSource+0x172>
 8002a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8e:	d87f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b70      	cmp	r3, #112	; 0x70
 8002a92:	d01a      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xa6>
 8002a94:	2b70      	cmp	r3, #112	; 0x70
 8002a96:	d87b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b60      	cmp	r3, #96	; 0x60
 8002a9a:	d050      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x11a>
 8002a9c:	2b60      	cmp	r3, #96	; 0x60
 8002a9e:	d877      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b50      	cmp	r3, #80	; 0x50
 8002aa2:	d03c      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0xfa>
 8002aa4:	2b50      	cmp	r3, #80	; 0x50
 8002aa6:	d873      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d058      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x13a>
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d86f      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b30      	cmp	r3, #48	; 0x30
 8002ab2:	d064      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	2b30      	cmp	r3, #48	; 0x30
 8002ab6:	d86b      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d060      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d867      	bhi.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05c      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d05a      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x15a>
 8002ac8:	e062      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6899      	ldr	r1, [r3, #8]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f000 f96a 	bl	8002db2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	609a      	str	r2, [r3, #8]
      break;
 8002af6:	e04f      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f000 f953 	bl	8002db2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1a:	609a      	str	r2, [r3, #8]
      break;
 8002b1c:	e03c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 f8ca 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2150      	movs	r1, #80	; 0x50
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f921 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e02c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f000 f8e8 	bl	8002d20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2160      	movs	r1, #96	; 0x60
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f911 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b5c:	e01c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f000 f8aa 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f901 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b7c:	e00c      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f000 f8f8 	bl	8002d7e <TIM_ITRx_SetConfig>
      break;
 8002b8e:	e003      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e000      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d007      	beq.n	8002c24 <TIM_Base_SetConfig+0x28>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1a:	d003      	beq.n	8002c24 <TIM_Base_SetConfig+0x28>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a28      	ldr	r2, [pc, #160]	; (8002cc0 <TIM_Base_SetConfig+0xc4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d108      	bne.n	8002c36 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <TIM_Base_SetConfig+0x52>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d003      	beq.n	8002c4e <TIM_Base_SetConfig+0x52>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <TIM_Base_SetConfig+0xc4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <TIM_Base_SetConfig+0xc0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d103      	bne.n	8002c94 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f023 0201 	bic.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0201 	bic.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 030a 	bic.w	r3, r3, #10
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0210 	bic.w	r2, r3, #16
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	031b      	lsls	r3, r3, #12
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b085      	sub	sp, #20
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f043 0307 	orr.w	r3, r3, #7
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b087      	sub	sp, #28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	021a      	lsls	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	609a      	str	r2, [r3, #8]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e041      	b.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d009      	beq.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d004      	beq.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d10c      	bne.n	8002e7a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400

08002ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	4d0c      	ldr	r5, [pc, #48]	; (8002efc <__libc_init_array+0x38>)
 8002eca:	4c0d      	ldr	r4, [pc, #52]	; (8002f00 <__libc_init_array+0x3c>)
 8002ecc:	1b64      	subs	r4, r4, r5
 8002ece:	10a4      	asrs	r4, r4, #2
 8002ed0:	42a6      	cmp	r6, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	f000 f822 	bl	8002f1c <_init>
 8002ed8:	2600      	movs	r6, #0
 8002eda:	4d0a      	ldr	r5, [pc, #40]	; (8002f04 <__libc_init_array+0x40>)
 8002edc:	4c0a      	ldr	r4, [pc, #40]	; (8002f08 <__libc_init_array+0x44>)
 8002ede:	1b64      	subs	r4, r4, r5
 8002ee0:	10a4      	asrs	r4, r4, #2
 8002ee2:	42a6      	cmp	r6, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eec:	4798      	blx	r3
 8002eee:	3601      	adds	r6, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef6:	4798      	blx	r3
 8002ef8:	3601      	adds	r6, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08002f58 	.word	0x08002f58
 8002f00:	08002f58 	.word	0x08002f58
 8002f04:	08002f58 	.word	0x08002f58
 8002f08:	08002f5c 	.word	0x08002f5c

08002f0c <memset>:
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4402      	add	r2, r0
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <memset+0xa>
 8002f14:	4770      	bx	lr
 8002f16:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1a:	e7f9      	b.n	8002f10 <memset+0x4>

08002f1c <_init>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr

08002f28 <_fini>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr
